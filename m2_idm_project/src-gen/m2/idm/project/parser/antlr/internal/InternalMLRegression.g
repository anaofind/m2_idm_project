/*
 * generated by Xtext 2.23.0
 */
grammar InternalMLRegression;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package m2.idm.project.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package m2.idm.project.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import m2.idm.project.services.MLRegressionGrammarAccess;

}

@parser::members {

 	private MLRegressionGrammarAccess grammarAccess;

    public InternalMLRegressionParser(TokenStream input, MLRegressionGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "MLRegression";
   	}

   	@Override
   	protected MLRegressionGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleMLRegression
entryRuleMLRegression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMLRegressionRule()); }
	iv_ruleMLRegression=ruleMLRegression
	{ $current=$iv_ruleMLRegression.current; }
	EOF;

// Rule MLRegression
ruleMLRegression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMLRegressionAccess().getDatasetDatasetParserRuleCall_0_0());
				}
				lv_dataset_0_0=ruleDataset
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMLRegressionRule());
					}
					set(
						$current,
						"dataset",
						lv_dataset_0_0,
						"m2.idm.project.MLRegression.Dataset");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMLRegressionAccess().getLearningTypeLearningTypeParserRuleCall_1_0());
				}
				lv_learningType_1_0=ruleLearningType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMLRegressionRule());
					}
					set(
						$current,
						"learningType",
						lv_learningType_1_0,
						"m2.idm.project.MLRegression.LearningType");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getMLRegressionAccess().getVarsVariablesParserRuleCall_2_0());
				}
				lv_vars_2_0=ruleVariables
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMLRegressionRule());
					}
					set(
						$current,
						"vars",
						lv_vars_2_0,
						"m2.idm.project.MLRegression.Variables");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMLRegressionAccess().getReturnTypeReturnTypeParserRuleCall_3_0());
				}
				lv_returnType_3_0=ruleReturnType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMLRegressionRule());
					}
					set(
						$current,
						"returnType",
						lv_returnType_3_0,
						"m2.idm.project.MLRegression.ReturnType");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleDataset
entryRuleDataset returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDatasetRule()); }
	iv_ruleDataset=ruleDataset
	{ $current=$iv_ruleDataset.current; }
	EOF;

// Rule Dataset
ruleDataset returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_dataset_0_0='import'
				{
					newLeafNode(lv_dataset_0_0, grammarAccess.getDatasetAccess().getDatasetImportKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDatasetRule());
					}
					setWithLastConsumed($current, "dataset", lv_dataset_0_0, "import");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getDatasetAccess().getDataStringValueParserRuleCall_1_0());
				}
				lv_data_1_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDatasetRule());
					}
					set(
						$current,
						"data",
						lv_data_1_0,
						"m2.idm.project.MLRegression.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getDatasetAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleLearningType
entryRuleLearningType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLearningTypeRule()); }
	iv_ruleLearningType=ruleLearningType
	{ $current=$iv_ruleLearningType.current; }
	EOF;

// Rule LearningType
ruleLearningType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='learning'
		{
			newLeafNode(otherlv_0, grammarAccess.getLearningTypeAccess().getLearningKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getLearningTypeAccess().getTrainingTrainingParserRuleCall_1_0_0());
					}
					lv_training_1_0=ruleTraining
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLearningTypeRule());
						}
						set(
							$current,
							"training",
							lv_training_1_0,
							"m2.idm.project.MLRegression.Training");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getLearningTypeAccess().getCrossValidationCrossValidationParserRuleCall_1_1_0());
					}
					lv_crossValidation_2_0=ruleCrossValidation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLearningTypeRule());
						}
						set(
							$current,
							"crossValidation",
							lv_crossValidation_2_0,
							"m2.idm.project.MLRegression.CrossValidation");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleTraining
entryRuleTraining returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTrainingRule()); }
	iv_ruleTraining=ruleTraining
	{ $current=$iv_ruleTraining.current; }
	EOF;

// Rule Training
ruleTraining returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='training'
		{
			newLeafNode(otherlv_0, grammarAccess.getTrainingAccess().getTrainingKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTrainingAccess().getTrainingNumberValueParserRuleCall_1_0_0());
					}
					lv_training_1_1=ruleNumberValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTrainingRule());
						}
						set(
							$current,
							"training",
							lv_training_1_1,
							"m2.idm.project.MLRegression.NumberValue");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getTrainingAccess().getTrainingPercentValueParserRuleCall_1_0_1());
					}
					lv_training_1_2=rulePercentValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTrainingRule());
						}
						set(
							$current,
							"training",
							lv_training_1_2,
							"m2.idm.project.MLRegression.PercentValue");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getTrainingAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleCrossValidation
entryRuleCrossValidation returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCrossValidationRule()); }
	iv_ruleCrossValidation=ruleCrossValidation
	{ $current=$iv_ruleCrossValidation.current.getText(); }
	EOF;

// Rule CrossValidation
ruleCrossValidation returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='cross_validation'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getCrossValidationAccess().getCross_validationKeyword());
	}
;

// Entry rule entryRuleVariables
entryRuleVariables returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariablesRule()); }
	iv_ruleVariables=ruleVariables
	{ $current=$iv_ruleVariables.current; }
	EOF;

// Rule Variables
ruleVariables returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getVariablesAccess().getPredictivesPredictivesParserRuleCall_0_0());
				}
				lv_predictives_0_0=rulePredictives
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariablesRule());
					}
					set(
						$current,
						"predictives",
						lv_predictives_0_0,
						"m2.idm.project.MLRegression.Predictives");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getVariablesAccess().getTargetsTargetsParserRuleCall_1_0());
				}
				lv_targets_1_0=ruleTargets
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariablesRule());
					}
					set(
						$current,
						"targets",
						lv_targets_1_0,
						"m2.idm.project.MLRegression.Targets");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePredictives
entryRulePredictives returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPredictivesRule()); }
	iv_rulePredictives=rulePredictives
	{ $current=$iv_rulePredictives.current; }
	EOF;

// Rule Predictives
rulePredictives returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='predict'
		{
			newLeafNode(otherlv_0, grammarAccess.getPredictivesAccess().getPredictKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getPredictivesAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPredictivesAccess().getVarsVarParserRuleCall_2_0());
				}
				lv_vars_2_0=ruleVar
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPredictivesRule());
					}
					add(
						$current,
						"vars",
						lv_vars_2_0,
						"m2.idm.project.MLRegression.Var");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getPredictivesAccess().getRightCurlyBracketKeyword_3());
		}
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getPredictivesAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleTargets
entryRuleTargets returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTargetsRule()); }
	iv_ruleTargets=ruleTargets
	{ $current=$iv_ruleTargets.current; }
	EOF;

// Rule Targets
ruleTargets returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='target'
		{
			newLeafNode(otherlv_0, grammarAccess.getTargetsAccess().getTargetKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTargetsAccess().getVarVarParserRuleCall_1_0());
				}
				lv_var_1_0=ruleVar
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTargetsRule());
					}
					set(
						$current,
						"var",
						lv_var_1_0,
						"m2.idm.project.MLRegression.Var");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getTargetsAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleVar
entryRuleVar returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarRule()); }
	iv_ruleVar=ruleVar
	{ $current=$iv_ruleVar.current; }
	EOF;

// Rule Var
ruleVar returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getVarAccess().getNameVarStringValueParserRuleCall_0());
			}
			lv_nameVar_0_0=ruleStringValue
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getVarRule());
				}
				set(
					$current,
					"nameVar",
					lv_nameVar_0_0,
					"m2.idm.project.MLRegression.StringValue");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleReturnType
entryRuleReturnType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReturnTypeRule()); }
	iv_ruleReturnType=ruleReturnType
	{ $current=$iv_ruleReturnType.current; }
	EOF;

// Rule ReturnType
ruleReturnType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='return'
		{
			newLeafNode(otherlv_0, grammarAccess.getReturnTypeAccess().getReturnKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getReturnTypeAccess().getNameReturnStringValueParserRuleCall_1_0());
				}
				lv_nameReturn_1_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReturnTypeRule());
					}
					set(
						$current,
						"nameReturn",
						lv_nameReturn_1_0,
						"m2.idm.project.MLRegression.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleStringValue
entryRuleStringValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringValueRule()); }
	iv_ruleStringValue=ruleStringValue
	{ $current=$iv_ruleStringValue.current; }
	EOF;

// Rule StringValue
ruleStringValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_STRING
			{
				newLeafNode(lv_value_0_0, grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getStringValueRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

// Entry rule entryRuleNumberValue
entryRuleNumberValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumberValueRule()); }
	iv_ruleNumberValue=ruleNumberValue
	{ $current=$iv_ruleNumberValue.current; }
	EOF;

// Rule NumberValue
ruleNumberValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_value_0_0=RULE_INT
				{
					newLeafNode(lv_value_0_0, grammarAccess.getNumberValueAccess().getValueINTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNumberValueRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_0_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			otherlv_1='.'
			{
				newLeafNode(otherlv_1, grammarAccess.getNumberValueAccess().getFullStopKeyword_1_0());
			}
			(
				(
					lv_decimal_2_0=RULE_INT
					{
						newLeafNode(lv_decimal_2_0, grammarAccess.getNumberValueAccess().getDecimalINTTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNumberValueRule());
						}
						addWithLastConsumed(
							$current,
							"decimal",
							lv_decimal_2_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)*
		)?
	)
;

// Entry rule entryRulePercentValue
entryRulePercentValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPercentValueRule()); }
	iv_rulePercentValue=rulePercentValue
	{ $current=$iv_rulePercentValue.current; }
	EOF;

// Rule PercentValue
rulePercentValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPercentValueAccess().getNumberValueParserRuleCall_0());
		}
		this_NumberValue_0=ruleNumberValue
		{
			$current = $this_NumberValue_0.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_1='%'
		{
			newLeafNode(otherlv_1, grammarAccess.getPercentValueAccess().getPercentSignKeyword_1());
		}
	)
;

// Entry rule entryRuleBooleanValue
entryRuleBooleanValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanValueRule()); }
	iv_ruleBooleanValue=ruleBooleanValue
	{ $current=$iv_ruleBooleanValue.current; }
	EOF;

// Rule BooleanValue
ruleBooleanValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_value_0_1='false'
				{
					newLeafNode(lv_value_0_1, grammarAccess.getBooleanValueAccess().getValueFalseKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBooleanValueRule());
					}
					setWithLastConsumed($current, "value", lv_value_0_1, null);
				}
				    |
				lv_value_0_2='true'
				{
					newLeafNode(lv_value_0_2, grammarAccess.getBooleanValueAccess().getValueTrueKeyword_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBooleanValueRule());
					}
					setWithLastConsumed($current, "value", lv_value_0_2, null);
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
