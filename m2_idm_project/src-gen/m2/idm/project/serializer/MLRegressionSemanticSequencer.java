/*
 * generated by Xtext 2.23.0
 */
package m2.idm.project.serializer;

import com.google.inject.Inject;
import java.util.Set;
import m2.idm.project.mLRegression.BooleanValue;
import m2.idm.project.mLRegression.Dataset;
import m2.idm.project.mLRegression.LearningType;
import m2.idm.project.mLRegression.MLRegression;
import m2.idm.project.mLRegression.MLRegressionPackage;
import m2.idm.project.mLRegression.NumberValue;
import m2.idm.project.mLRegression.Predictives;
import m2.idm.project.mLRegression.ReturnType;
import m2.idm.project.mLRegression.StringValue;
import m2.idm.project.mLRegression.Targets;
import m2.idm.project.mLRegression.Training;
import m2.idm.project.mLRegression.Var;
import m2.idm.project.mLRegression.Variables;
import m2.idm.project.services.MLRegressionGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class MLRegressionSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MLRegressionGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MLRegressionPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MLRegressionPackage.BOOLEAN_VALUE:
				sequence_BooleanValue(context, (BooleanValue) semanticObject); 
				return; 
			case MLRegressionPackage.DATASET:
				sequence_Dataset(context, (Dataset) semanticObject); 
				return; 
			case MLRegressionPackage.LEARNING_TYPE:
				sequence_LearningType(context, (LearningType) semanticObject); 
				return; 
			case MLRegressionPackage.ML_REGRESSION:
				sequence_MLRegression(context, (MLRegression) semanticObject); 
				return; 
			case MLRegressionPackage.NUMBER_VALUE:
				sequence_NumberValue(context, (NumberValue) semanticObject); 
				return; 
			case MLRegressionPackage.PREDICTIVES:
				sequence_Predictives(context, (Predictives) semanticObject); 
				return; 
			case MLRegressionPackage.RETURN_TYPE:
				sequence_ReturnType(context, (ReturnType) semanticObject); 
				return; 
			case MLRegressionPackage.STRING_VALUE:
				sequence_StringValue(context, (StringValue) semanticObject); 
				return; 
			case MLRegressionPackage.TARGETS:
				sequence_Targets(context, (Targets) semanticObject); 
				return; 
			case MLRegressionPackage.TRAINING:
				sequence_Training(context, (Training) semanticObject); 
				return; 
			case MLRegressionPackage.VAR:
				sequence_Var(context, (Var) semanticObject); 
				return; 
			case MLRegressionPackage.VARIABLES:
				sequence_Variables(context, (Variables) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     TypeValue returns BooleanValue
	 *     BooleanValue returns BooleanValue
	 *
	 * Constraint:
	 *     (value='false' | value='true')
	 */
	protected void sequence_BooleanValue(ISerializationContext context, BooleanValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Dataset returns Dataset
	 *
	 * Constraint:
	 *     (dataset='import' data=StringValue)
	 */
	protected void sequence_Dataset(ISerializationContext context, Dataset semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MLRegressionPackage.Literals.DATASET__DATASET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MLRegressionPackage.Literals.DATASET__DATASET));
			if (transientValues.isValueTransient(semanticObject, MLRegressionPackage.Literals.DATASET__DATA) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MLRegressionPackage.Literals.DATASET__DATA));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDatasetAccess().getDatasetImportKeyword_0_0(), semanticObject.getDataset());
		feeder.accept(grammarAccess.getDatasetAccess().getDataStringValueParserRuleCall_1_0(), semanticObject.getData());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     LearningType returns LearningType
	 *
	 * Constraint:
	 *     (training=Training | crossValidation=CrossValidation)
	 */
	protected void sequence_LearningType(ISerializationContext context, LearningType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MLRegression returns MLRegression
	 *
	 * Constraint:
	 *     (dataset=Dataset learningType=LearningType? vars=Variables returnType=ReturnType?)
	 */
	protected void sequence_MLRegression(ISerializationContext context, MLRegression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeValue returns NumberValue
	 *     NumberValue returns NumberValue
	 *     PercentValue returns NumberValue
	 *
	 * Constraint:
	 *     (value=INT decimal+=INT*)
	 */
	protected void sequence_NumberValue(ISerializationContext context, NumberValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Predictives returns Predictives
	 *
	 * Constraint:
	 *     vars+=Var+
	 */
	protected void sequence_Predictives(ISerializationContext context, Predictives semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReturnType returns ReturnType
	 *
	 * Constraint:
	 *     nameReturn=StringValue
	 */
	protected void sequence_ReturnType(ISerializationContext context, ReturnType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MLRegressionPackage.Literals.RETURN_TYPE__NAME_RETURN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MLRegressionPackage.Literals.RETURN_TYPE__NAME_RETURN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReturnTypeAccess().getNameReturnStringValueParserRuleCall_1_0(), semanticObject.getNameReturn());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TypeValue returns StringValue
	 *     StringValue returns StringValue
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_StringValue(ISerializationContext context, StringValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MLRegressionPackage.Literals.STRING_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MLRegressionPackage.Literals.STRING_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Targets returns Targets
	 *
	 * Constraint:
	 *     var=Var
	 */
	protected void sequence_Targets(ISerializationContext context, Targets semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MLRegressionPackage.Literals.TARGETS__VAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MLRegressionPackage.Literals.TARGETS__VAR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTargetsAccess().getVarVarParserRuleCall_1_0(), semanticObject.getVar());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Training returns Training
	 *
	 * Constraint:
	 *     (training=NumberValue | training=PercentValue)
	 */
	protected void sequence_Training(ISerializationContext context, Training semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Var returns Var
	 *
	 * Constraint:
	 *     nameVar=StringValue
	 */
	protected void sequence_Var(ISerializationContext context, Var semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MLRegressionPackage.Literals.VAR__NAME_VAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MLRegressionPackage.Literals.VAR__NAME_VAR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVarAccess().getNameVarStringValueParserRuleCall_0(), semanticObject.getNameVar());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Variables returns Variables
	 *
	 * Constraint:
	 *     (predictives=Predictives targets=Targets)
	 */
	protected void sequence_Variables(ISerializationContext context, Variables semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MLRegressionPackage.Literals.VARIABLES__PREDICTIVES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MLRegressionPackage.Literals.VARIABLES__PREDICTIVES));
			if (transientValues.isValueTransient(semanticObject, MLRegressionPackage.Literals.VARIABLES__TARGETS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MLRegressionPackage.Literals.VARIABLES__TARGETS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariablesAccess().getPredictivesPredictivesParserRuleCall_0_0(), semanticObject.getPredictives());
		feeder.accept(grammarAccess.getVariablesAccess().getTargetsTargetsParserRuleCall_1_0(), semanticObject.getTargets());
		feeder.finish();
	}
	
	
}
