/*
 * generated by Xtext 2.23.0
 */
package m2.idm.project.serializer;

import com.google.inject.Inject;
import java.util.Set;
import m2.idm.project.mLRegression.Algo;
import m2.idm.project.mLRegression.BooleanValue;
import m2.idm.project.mLRegression.Calculate;
import m2.idm.project.mLRegression.CrossValidation;
import m2.idm.project.mLRegression.Dataset;
import m2.idm.project.mLRegression.IntegerValue;
import m2.idm.project.mLRegression.LineRegress;
import m2.idm.project.mLRegression.ListePredictiveVar;
import m2.idm.project.mLRegression.MLRegression;
import m2.idm.project.mLRegression.MLRegressionPackage;
import m2.idm.project.mLRegression.NumberValue;
import m2.idm.project.mLRegression.Partition;
import m2.idm.project.mLRegression.StringValue;
import m2.idm.project.mLRegression.TargetVar;
import m2.idm.project.mLRegression.Variables;
import m2.idm.project.services.MLRegressionGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class MLRegressionSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MLRegressionGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MLRegressionPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MLRegressionPackage.ALGO:
				sequence_Algo(context, (Algo) semanticObject); 
				return; 
			case MLRegressionPackage.BOOLEAN_VALUE:
				sequence_BooleanValue(context, (BooleanValue) semanticObject); 
				return; 
			case MLRegressionPackage.CALCULATE:
				sequence_Calculate(context, (Calculate) semanticObject); 
				return; 
			case MLRegressionPackage.CROSS_VALIDATION:
				sequence_CrossValidation(context, (CrossValidation) semanticObject); 
				return; 
			case MLRegressionPackage.DATASET:
				sequence_Dataset(context, (Dataset) semanticObject); 
				return; 
			case MLRegressionPackage.INTEGER_VALUE:
				sequence_IntegerValue(context, (IntegerValue) semanticObject); 
				return; 
			case MLRegressionPackage.LINE_REGRESS:
				sequence_LineRegress(context, (LineRegress) semanticObject); 
				return; 
			case MLRegressionPackage.LISTE_PREDICTIVE_VAR:
				sequence_ListePredictiveVar(context, (ListePredictiveVar) semanticObject); 
				return; 
			case MLRegressionPackage.ML_REGRESSION:
				sequence_MLRegression(context, (MLRegression) semanticObject); 
				return; 
			case MLRegressionPackage.NUMBER_VALUE:
				sequence_NumberValue(context, (NumberValue) semanticObject); 
				return; 
			case MLRegressionPackage.PARTITION:
				sequence_Partition(context, (Partition) semanticObject); 
				return; 
			case MLRegressionPackage.STRING_VALUE:
				sequence_StringValue(context, (StringValue) semanticObject); 
				return; 
			case MLRegressionPackage.TARGET_VAR:
				sequence_TargetVar(context, (TargetVar) semanticObject); 
				return; 
			case MLRegressionPackage.VARIABLES:
				sequence_Variables(context, (Variables) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Algo returns Algo
	 *
	 * Constraint:
	 *     algo=AlgoML
	 */
	protected void sequence_Algo(ISerializationContext context, Algo semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MLRegressionPackage.Literals.ALGO__ALGO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MLRegressionPackage.Literals.ALGO__ALGO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAlgoAccess().getAlgoAlgoMLParserRuleCall_2_0(), semanticObject.getAlgo());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TypeValue returns BooleanValue
	 *     BooleanValue returns BooleanValue
	 *
	 * Constraint:
	 *     (value='false' | value='true')
	 */
	protected void sequence_BooleanValue(ISerializationContext context, BooleanValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Calculate returns Calculate
	 *
	 * Constraint:
	 *     calculateType=CalculateType
	 */
	protected void sequence_Calculate(ISerializationContext context, Calculate semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MLRegressionPackage.Literals.CALCULATE__CALCULATE_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MLRegressionPackage.Literals.CALCULATE__CALCULATE_TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCalculateAccess().getCalculateTypeCalculateTypeParserRuleCall_2_0(), semanticObject.getCalculateType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvaluationType returns CrossValidation
	 *     CrossValidation returns CrossValidation
	 *
	 * Constraint:
	 *     k=IntegerValue
	 */
	protected void sequence_CrossValidation(ISerializationContext context, CrossValidation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MLRegressionPackage.Literals.CROSS_VALIDATION__K) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MLRegressionPackage.Literals.CROSS_VALIDATION__K));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCrossValidationAccess().getKIntegerValueParserRuleCall_2_0(), semanticObject.getK());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Dataset returns Dataset
	 *
	 * Constraint:
	 *     (dataset='import' data=StringValue)
	 */
	protected void sequence_Dataset(ISerializationContext context, Dataset semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MLRegressionPackage.Literals.DATASET__DATASET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MLRegressionPackage.Literals.DATASET__DATASET));
			if (transientValues.isValueTransient(semanticObject, MLRegressionPackage.Literals.DATASET__DATA) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MLRegressionPackage.Literals.DATASET__DATA));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDatasetAccess().getDatasetImportKeyword_0_0(), semanticObject.getDataset());
		feeder.accept(grammarAccess.getDatasetAccess().getDataStringValueParserRuleCall_1_0(), semanticObject.getData());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IntegerValue returns IntegerValue
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_IntegerValue(ISerializationContext context, IntegerValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MLRegressionPackage.Literals.INTEGER_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MLRegressionPackage.Literals.INTEGER_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntegerValueAccess().getValueINTTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AlgoML returns LineRegress
	 *     LineRegress returns LineRegress
	 *
	 * Constraint:
	 *     (x1=ID y1=Y x2=ID y2=Y)
	 */
	protected void sequence_LineRegress(ISerializationContext context, LineRegress semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MLRegressionPackage.Literals.LINE_REGRESS__X1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MLRegressionPackage.Literals.LINE_REGRESS__X1));
			if (transientValues.isValueTransient(semanticObject, MLRegressionPackage.Literals.LINE_REGRESS__Y1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MLRegressionPackage.Literals.LINE_REGRESS__Y1));
			if (transientValues.isValueTransient(semanticObject, MLRegressionPackage.Literals.LINE_REGRESS__X2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MLRegressionPackage.Literals.LINE_REGRESS__X2));
			if (transientValues.isValueTransient(semanticObject, MLRegressionPackage.Literals.LINE_REGRESS__Y2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MLRegressionPackage.Literals.LINE_REGRESS__Y2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLineRegressAccess().getX1IDTerminalRuleCall_2_0(), semanticObject.getX1());
		feeder.accept(grammarAccess.getLineRegressAccess().getY1YParserRuleCall_4_0(), semanticObject.getY1());
		feeder.accept(grammarAccess.getLineRegressAccess().getX2IDTerminalRuleCall_6_0(), semanticObject.getX2());
		feeder.accept(grammarAccess.getLineRegressAccess().getY2YParserRuleCall_8_0(), semanticObject.getY2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ListePredictiveVar returns ListePredictiveVar
	 *
	 * Constraint:
	 *     (varPred=STRING predVar+=STRING*)
	 */
	protected void sequence_ListePredictiveVar(ISerializationContext context, ListePredictiveVar semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MLRegression returns MLRegression
	 *
	 * Constraint:
	 *     (dataset=Dataset evaluation=EvaluationType vars=Variables? calculate=Calculate algo=Algo)
	 */
	protected void sequence_MLRegression(ISerializationContext context, MLRegression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeValue returns NumberValue
	 *     NumericValue returns NumberValue
	 *     NumberValue returns NumberValue
	 *     PercentValue returns NumberValue
	 *
	 * Constraint:
	 *     (value=INT decimal+=INT*)
	 */
	protected void sequence_NumberValue(ISerializationContext context, NumberValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EvaluationType returns Partition
	 *     Partition returns Partition
	 *
	 * Constraint:
	 *     (train=NumericValue test=NumericValue)
	 */
	protected void sequence_Partition(ISerializationContext context, Partition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MLRegressionPackage.Literals.PARTITION__TRAIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MLRegressionPackage.Literals.PARTITION__TRAIN));
			if (transientValues.isValueTransient(semanticObject, MLRegressionPackage.Literals.PARTITION__TEST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MLRegressionPackage.Literals.PARTITION__TEST));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPartitionAccess().getTrainNumericValueParserRuleCall_2_0(), semanticObject.getTrain());
		feeder.accept(grammarAccess.getPartitionAccess().getTestNumericValueParserRuleCall_4_0(), semanticObject.getTest());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TypeValue returns StringValue
	 *     StringValue returns StringValue
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_StringValue(ISerializationContext context, StringValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MLRegressionPackage.Literals.STRING_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MLRegressionPackage.Literals.STRING_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TargetVar returns TargetVar
	 *
	 * Constraint:
	 *     varTar=StringValue
	 */
	protected void sequence_TargetVar(ISerializationContext context, TargetVar semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MLRegressionPackage.Literals.TARGET_VAR__VAR_TAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MLRegressionPackage.Literals.TARGET_VAR__VAR_TAR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTargetVarAccess().getVarTarStringValueParserRuleCall_2_0(), semanticObject.getVarTar());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Variables returns Variables
	 *
	 * Constraint:
	 *     (predictives=ListePredictiveVar targets=TargetVar)
	 */
	protected void sequence_Variables(ISerializationContext context, Variables semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MLRegressionPackage.Literals.VARIABLES__PREDICTIVES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MLRegressionPackage.Literals.VARIABLES__PREDICTIVES));
			if (transientValues.isValueTransient(semanticObject, MLRegressionPackage.Literals.VARIABLES__TARGETS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MLRegressionPackage.Literals.VARIABLES__TARGETS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariablesAccess().getPredictivesListePredictiveVarParserRuleCall_0_0(), semanticObject.getPredictives());
		feeder.accept(grammarAccess.getVariablesAccess().getTargetsTargetVarParserRuleCall_1_0(), semanticObject.getTargets());
		feeder.finish();
	}
	
	
}
