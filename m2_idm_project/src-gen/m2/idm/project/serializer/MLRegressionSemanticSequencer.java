/*
 * generated by Xtext 2.23.0
 */
package m2.idm.project.serializer;

import com.google.inject.Inject;
import java.util.Set;
import m2.idm.project.mLRegression.Algo;
import m2.idm.project.mLRegression.Calculate;
import m2.idm.project.mLRegression.CrossValidation;
import m2.idm.project.mLRegression.Dataset;
import m2.idm.project.mLRegression.FLOAT;
import m2.idm.project.mLRegression.LanguageTarget;
import m2.idm.project.mLRegression.Loop;
import m2.idm.project.mLRegression.MLRegression;
import m2.idm.project.mLRegression.MLRegressionPackage;
import m2.idm.project.mLRegression.Model;
import m2.idm.project.mLRegression.PERCENT;
import m2.idm.project.mLRegression.Partition;
import m2.idm.project.mLRegression.PredictiveVars;
import m2.idm.project.mLRegression.TargetVars;
import m2.idm.project.mLRegression.Variables;
import m2.idm.project.services.MLRegressionGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class MLRegressionSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MLRegressionGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MLRegressionPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MLRegressionPackage.ALGO:
				sequence_Algo(context, (Algo) semanticObject); 
				return; 
			case MLRegressionPackage.CALCULATE:
				sequence_Calculate(context, (Calculate) semanticObject); 
				return; 
			case MLRegressionPackage.CROSS_VALIDATION:
				sequence_CrossValidation(context, (CrossValidation) semanticObject); 
				return; 
			case MLRegressionPackage.DATASET:
				sequence_Dataset(context, (Dataset) semanticObject); 
				return; 
			case MLRegressionPackage.FLOAT:
				sequence_FLOAT(context, (FLOAT) semanticObject); 
				return; 
			case MLRegressionPackage.LANGUAGE_TARGET:
				sequence_LanguageTarget(context, (LanguageTarget) semanticObject); 
				return; 
			case MLRegressionPackage.LOOP:
				sequence_Loop(context, (Loop) semanticObject); 
				return; 
			case MLRegressionPackage.ML_REGRESSION:
				sequence_MLRegression(context, (MLRegression) semanticObject); 
				return; 
			case MLRegressionPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case MLRegressionPackage.PERCENT:
				sequence_PERCENT(context, (PERCENT) semanticObject); 
				return; 
			case MLRegressionPackage.PARTITION:
				sequence_Partition(context, (Partition) semanticObject); 
				return; 
			case MLRegressionPackage.PREDICTIVE_VARS:
				sequence_PredictiveVars(context, (PredictiveVars) semanticObject); 
				return; 
			case MLRegressionPackage.TARGET_VARS:
				sequence_TargetVars(context, (TargetVars) semanticObject); 
				return; 
			case MLRegressionPackage.VARIABLES:
				sequence_Variables(context, (Variables) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Algo returns Algo
	 *
	 * Constraint:
	 *     algo=AlgoType
	 */
	protected void sequence_Algo(ISerializationContext context, Algo semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MLRegressionPackage.Literals.ALGO__ALGO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MLRegressionPackage.Literals.ALGO__ALGO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAlgoAccess().getAlgoAlgoTypeParserRuleCall_2_0(), semanticObject.getAlgo());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Calculate returns Calculate
	 *
	 * Constraint:
	 *     calculateType=CalculateType
	 */
	protected void sequence_Calculate(ISerializationContext context, Calculate semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MLRegressionPackage.Literals.CALCULATE__CALCULATE_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MLRegressionPackage.Literals.CALCULATE__CALCULATE_TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCalculateAccess().getCalculateTypeCalculateTypeParserRuleCall_2_0(), semanticObject.getCalculateType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvaluationType returns CrossValidation
	 *     CrossValidation returns CrossValidation
	 *
	 * Constraint:
	 *     k=INT
	 */
	protected void sequence_CrossValidation(ISerializationContext context, CrossValidation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MLRegressionPackage.Literals.CROSS_VALIDATION__K) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MLRegressionPackage.Literals.CROSS_VALIDATION__K));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCrossValidationAccess().getKINTTerminalRuleCall_2_0(), semanticObject.getK());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Dataset returns Dataset
	 *
	 * Constraint:
	 *     (dataPath=STRING separator=STRING?)
	 */
	protected void sequence_Dataset(ISerializationContext context, Dataset semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NumericValue returns FLOAT
	 *     FLOAT returns FLOAT
	 *
	 * Constraint:
	 *     (value=INT decimal=INT?)
	 */
	protected void sequence_FLOAT(ISerializationContext context, FLOAT semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LanguageTarget returns LanguageTarget
	 *
	 * Constraint:
	 *     (language=Python | language=R)
	 */
	protected void sequence_LanguageTarget(ISerializationContext context, LanguageTarget semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Loop returns Loop
	 *
	 * Constraint:
	 *     i=INT
	 */
	protected void sequence_Loop(ISerializationContext context, Loop semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MLRegressionPackage.Literals.LOOP__I) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MLRegressionPackage.Literals.LOOP__I));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLoopAccess().getIINTTerminalRuleCall_2_0(), semanticObject.getI());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MLRegression returns MLRegression
	 *
	 * Constraint:
	 *     (
	 *         dataset=Dataset 
	 *         vars=Variables? 
	 *         evaluation=EvaluationType 
	 *         algo=Algo 
	 *         calculate=Calculate 
	 *         loop=Loop?
	 *     )
	 */
	protected void sequence_MLRegression(ISerializationContext context, MLRegression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (languageTarget=LanguageTarget? ml=MLRegression)
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NumericValue returns PERCENT
	 *     PERCENT returns PERCENT
	 *
	 * Constraint:
	 *     float=FLOAT
	 */
	protected void sequence_PERCENT(ISerializationContext context, PERCENT semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MLRegressionPackage.Literals.PERCENT__FLOAT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MLRegressionPackage.Literals.PERCENT__FLOAT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPERCENTAccess().getFloatFLOATParserRuleCall_0_0(), semanticObject.getFloat());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvaluationType returns Partition
	 *     Partition returns Partition
	 *
	 * Constraint:
	 *     test=NumericValue
	 */
	protected void sequence_Partition(ISerializationContext context, Partition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MLRegressionPackage.Literals.PARTITION__TEST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MLRegressionPackage.Literals.PARTITION__TEST));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPartitionAccess().getTestNumericValueParserRuleCall_2_0(), semanticObject.getTest());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PredictiveVars returns PredictiveVars
	 *
	 * Constraint:
	 *     (predVar+=STRING predVar+=STRING*)
	 */
	protected void sequence_PredictiveVars(ISerializationContext context, PredictiveVars semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TargetVars returns TargetVars
	 *
	 * Constraint:
	 *     (targetVar+=STRING targetVar+=STRING*)
	 */
	protected void sequence_TargetVars(ISerializationContext context, TargetVars semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Variables returns Variables
	 *
	 * Constraint:
	 *     (predictives=PredictiveVars targets=TargetVars)
	 */
	protected void sequence_Variables(ISerializationContext context, Variables semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MLRegressionPackage.Literals.VARIABLES__PREDICTIVES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MLRegressionPackage.Literals.VARIABLES__PREDICTIVES));
			if (transientValues.isValueTransient(semanticObject, MLRegressionPackage.Literals.VARIABLES__TARGETS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MLRegressionPackage.Literals.VARIABLES__TARGETS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariablesAccess().getPredictivesPredictiveVarsParserRuleCall_0_0(), semanticObject.getPredictives());
		feeder.accept(grammarAccess.getVariablesAccess().getTargetsTargetVarsParserRuleCall_1_0(), semanticObject.getTargets());
		feeder.finish();
	}
	
	
}
