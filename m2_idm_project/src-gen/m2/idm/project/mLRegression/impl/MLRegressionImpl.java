/**
 * generated by Xtext 2.23.0
 */
package m2.idm.project.mLRegression.impl;

import m2.idm.project.mLRegression.Dataset;
import m2.idm.project.mLRegression.LearningType;
import m2.idm.project.mLRegression.MLRegression;
import m2.idm.project.mLRegression.MLRegressionPackage;
import m2.idm.project.mLRegression.ReturnType;
import m2.idm.project.mLRegression.Variables;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>ML Regression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link m2.idm.project.mLRegression.impl.MLRegressionImpl#getDataset <em>Dataset</em>}</li>
 *   <li>{@link m2.idm.project.mLRegression.impl.MLRegressionImpl#getLearningType <em>Learning Type</em>}</li>
 *   <li>{@link m2.idm.project.mLRegression.impl.MLRegressionImpl#getVars <em>Vars</em>}</li>
 *   <li>{@link m2.idm.project.mLRegression.impl.MLRegressionImpl#getReturnType <em>Return Type</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MLRegressionImpl extends MinimalEObjectImpl.Container implements MLRegression
{
  /**
   * The cached value of the '{@link #getDataset() <em>Dataset</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDataset()
   * @generated
   * @ordered
   */
  protected Dataset dataset;

  /**
   * The cached value of the '{@link #getLearningType() <em>Learning Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLearningType()
   * @generated
   * @ordered
   */
  protected LearningType learningType;

  /**
   * The cached value of the '{@link #getVars() <em>Vars</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVars()
   * @generated
   * @ordered
   */
  protected Variables vars;

  /**
   * The cached value of the '{@link #getReturnType() <em>Return Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReturnType()
   * @generated
   * @ordered
   */
  protected ReturnType returnType;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MLRegressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MLRegressionPackage.Literals.ML_REGRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Dataset getDataset()
  {
    return dataset;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDataset(Dataset newDataset, NotificationChain msgs)
  {
    Dataset oldDataset = dataset;
    dataset = newDataset;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MLRegressionPackage.ML_REGRESSION__DATASET, oldDataset, newDataset);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDataset(Dataset newDataset)
  {
    if (newDataset != dataset)
    {
      NotificationChain msgs = null;
      if (dataset != null)
        msgs = ((InternalEObject)dataset).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MLRegressionPackage.ML_REGRESSION__DATASET, null, msgs);
      if (newDataset != null)
        msgs = ((InternalEObject)newDataset).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MLRegressionPackage.ML_REGRESSION__DATASET, null, msgs);
      msgs = basicSetDataset(newDataset, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MLRegressionPackage.ML_REGRESSION__DATASET, newDataset, newDataset));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LearningType getLearningType()
  {
    return learningType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLearningType(LearningType newLearningType, NotificationChain msgs)
  {
    LearningType oldLearningType = learningType;
    learningType = newLearningType;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MLRegressionPackage.ML_REGRESSION__LEARNING_TYPE, oldLearningType, newLearningType);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLearningType(LearningType newLearningType)
  {
    if (newLearningType != learningType)
    {
      NotificationChain msgs = null;
      if (learningType != null)
        msgs = ((InternalEObject)learningType).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MLRegressionPackage.ML_REGRESSION__LEARNING_TYPE, null, msgs);
      if (newLearningType != null)
        msgs = ((InternalEObject)newLearningType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MLRegressionPackage.ML_REGRESSION__LEARNING_TYPE, null, msgs);
      msgs = basicSetLearningType(newLearningType, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MLRegressionPackage.ML_REGRESSION__LEARNING_TYPE, newLearningType, newLearningType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Variables getVars()
  {
    return vars;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetVars(Variables newVars, NotificationChain msgs)
  {
    Variables oldVars = vars;
    vars = newVars;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MLRegressionPackage.ML_REGRESSION__VARS, oldVars, newVars);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVars(Variables newVars)
  {
    if (newVars != vars)
    {
      NotificationChain msgs = null;
      if (vars != null)
        msgs = ((InternalEObject)vars).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MLRegressionPackage.ML_REGRESSION__VARS, null, msgs);
      if (newVars != null)
        msgs = ((InternalEObject)newVars).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MLRegressionPackage.ML_REGRESSION__VARS, null, msgs);
      msgs = basicSetVars(newVars, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MLRegressionPackage.ML_REGRESSION__VARS, newVars, newVars));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReturnType getReturnType()
  {
    return returnType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetReturnType(ReturnType newReturnType, NotificationChain msgs)
  {
    ReturnType oldReturnType = returnType;
    returnType = newReturnType;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MLRegressionPackage.ML_REGRESSION__RETURN_TYPE, oldReturnType, newReturnType);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setReturnType(ReturnType newReturnType)
  {
    if (newReturnType != returnType)
    {
      NotificationChain msgs = null;
      if (returnType != null)
        msgs = ((InternalEObject)returnType).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MLRegressionPackage.ML_REGRESSION__RETURN_TYPE, null, msgs);
      if (newReturnType != null)
        msgs = ((InternalEObject)newReturnType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MLRegressionPackage.ML_REGRESSION__RETURN_TYPE, null, msgs);
      msgs = basicSetReturnType(newReturnType, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MLRegressionPackage.ML_REGRESSION__RETURN_TYPE, newReturnType, newReturnType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MLRegressionPackage.ML_REGRESSION__DATASET:
        return basicSetDataset(null, msgs);
      case MLRegressionPackage.ML_REGRESSION__LEARNING_TYPE:
        return basicSetLearningType(null, msgs);
      case MLRegressionPackage.ML_REGRESSION__VARS:
        return basicSetVars(null, msgs);
      case MLRegressionPackage.ML_REGRESSION__RETURN_TYPE:
        return basicSetReturnType(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MLRegressionPackage.ML_REGRESSION__DATASET:
        return getDataset();
      case MLRegressionPackage.ML_REGRESSION__LEARNING_TYPE:
        return getLearningType();
      case MLRegressionPackage.ML_REGRESSION__VARS:
        return getVars();
      case MLRegressionPackage.ML_REGRESSION__RETURN_TYPE:
        return getReturnType();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MLRegressionPackage.ML_REGRESSION__DATASET:
        setDataset((Dataset)newValue);
        return;
      case MLRegressionPackage.ML_REGRESSION__LEARNING_TYPE:
        setLearningType((LearningType)newValue);
        return;
      case MLRegressionPackage.ML_REGRESSION__VARS:
        setVars((Variables)newValue);
        return;
      case MLRegressionPackage.ML_REGRESSION__RETURN_TYPE:
        setReturnType((ReturnType)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MLRegressionPackage.ML_REGRESSION__DATASET:
        setDataset((Dataset)null);
        return;
      case MLRegressionPackage.ML_REGRESSION__LEARNING_TYPE:
        setLearningType((LearningType)null);
        return;
      case MLRegressionPackage.ML_REGRESSION__VARS:
        setVars((Variables)null);
        return;
      case MLRegressionPackage.ML_REGRESSION__RETURN_TYPE:
        setReturnType((ReturnType)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MLRegressionPackage.ML_REGRESSION__DATASET:
        return dataset != null;
      case MLRegressionPackage.ML_REGRESSION__LEARNING_TYPE:
        return learningType != null;
      case MLRegressionPackage.ML_REGRESSION__VARS:
        return vars != null;
      case MLRegressionPackage.ML_REGRESSION__RETURN_TYPE:
        return returnType != null;
    }
    return super.eIsSet(featureID);
  }

} //MLRegressionImpl
