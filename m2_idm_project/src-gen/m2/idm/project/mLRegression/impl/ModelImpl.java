/**
 * generated by Xtext 2.23.0
 */
package m2.idm.project.mLRegression.impl;

import m2.idm.project.mLRegression.LanguageTarget;
import m2.idm.project.mLRegression.MLRegression;
import m2.idm.project.mLRegression.MLRegressionPackage;
import m2.idm.project.mLRegression.Model;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Model</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link m2.idm.project.mLRegression.impl.ModelImpl#getLanguageTarget <em>Language Target</em>}</li>
 *   <li>{@link m2.idm.project.mLRegression.impl.ModelImpl#getMl <em>Ml</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ModelImpl extends MinimalEObjectImpl.Container implements Model
{
  /**
   * The cached value of the '{@link #getLanguageTarget() <em>Language Target</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLanguageTarget()
   * @generated
   * @ordered
   */
  protected LanguageTarget languageTarget;

  /**
   * The cached value of the '{@link #getMl() <em>Ml</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMl()
   * @generated
   * @ordered
   */
  protected MLRegression ml;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ModelImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MLRegressionPackage.Literals.MODEL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LanguageTarget getLanguageTarget()
  {
    return languageTarget;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLanguageTarget(LanguageTarget newLanguageTarget, NotificationChain msgs)
  {
    LanguageTarget oldLanguageTarget = languageTarget;
    languageTarget = newLanguageTarget;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MLRegressionPackage.MODEL__LANGUAGE_TARGET, oldLanguageTarget, newLanguageTarget);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLanguageTarget(LanguageTarget newLanguageTarget)
  {
    if (newLanguageTarget != languageTarget)
    {
      NotificationChain msgs = null;
      if (languageTarget != null)
        msgs = ((InternalEObject)languageTarget).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MLRegressionPackage.MODEL__LANGUAGE_TARGET, null, msgs);
      if (newLanguageTarget != null)
        msgs = ((InternalEObject)newLanguageTarget).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MLRegressionPackage.MODEL__LANGUAGE_TARGET, null, msgs);
      msgs = basicSetLanguageTarget(newLanguageTarget, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MLRegressionPackage.MODEL__LANGUAGE_TARGET, newLanguageTarget, newLanguageTarget));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MLRegression getMl()
  {
    return ml;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMl(MLRegression newMl, NotificationChain msgs)
  {
    MLRegression oldMl = ml;
    ml = newMl;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MLRegressionPackage.MODEL__ML, oldMl, newMl);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMl(MLRegression newMl)
  {
    if (newMl != ml)
    {
      NotificationChain msgs = null;
      if (ml != null)
        msgs = ((InternalEObject)ml).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MLRegressionPackage.MODEL__ML, null, msgs);
      if (newMl != null)
        msgs = ((InternalEObject)newMl).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MLRegressionPackage.MODEL__ML, null, msgs);
      msgs = basicSetMl(newMl, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MLRegressionPackage.MODEL__ML, newMl, newMl));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MLRegressionPackage.MODEL__LANGUAGE_TARGET:
        return basicSetLanguageTarget(null, msgs);
      case MLRegressionPackage.MODEL__ML:
        return basicSetMl(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MLRegressionPackage.MODEL__LANGUAGE_TARGET:
        return getLanguageTarget();
      case MLRegressionPackage.MODEL__ML:
        return getMl();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MLRegressionPackage.MODEL__LANGUAGE_TARGET:
        setLanguageTarget((LanguageTarget)newValue);
        return;
      case MLRegressionPackage.MODEL__ML:
        setMl((MLRegression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MLRegressionPackage.MODEL__LANGUAGE_TARGET:
        setLanguageTarget((LanguageTarget)null);
        return;
      case MLRegressionPackage.MODEL__ML:
        setMl((MLRegression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MLRegressionPackage.MODEL__LANGUAGE_TARGET:
        return languageTarget != null;
      case MLRegressionPackage.MODEL__ML:
        return ml != null;
    }
    return super.eIsSet(featureID);
  }

} //ModelImpl
