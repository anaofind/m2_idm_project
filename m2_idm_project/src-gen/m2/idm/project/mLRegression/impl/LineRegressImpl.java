/**
 * generated by Xtext 2.23.0
 */
package m2.idm.project.mLRegression.impl;

import m2.idm.project.mLRegression.LineRegress;
import m2.idm.project.mLRegression.MLRegressionPackage;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Line Regress</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link m2.idm.project.mLRegression.impl.LineRegressImpl#getLeftSidePredict <em>Left Side Predict</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LineRegressImpl extends AlgoTypeImpl implements LineRegress
{
  /**
   * The default value of the '{@link #getLeftSidePredict() <em>Left Side Predict</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeftSidePredict()
   * @generated
   * @ordered
   */
  protected static final String LEFT_SIDE_PREDICT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getLeftSidePredict() <em>Left Side Predict</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeftSidePredict()
   * @generated
   * @ordered
   */
  protected String leftSidePredict = LEFT_SIDE_PREDICT_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LineRegressImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MLRegressionPackage.Literals.LINE_REGRESS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getLeftSidePredict()
  {
    return leftSidePredict;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLeftSidePredict(String newLeftSidePredict)
  {
    String oldLeftSidePredict = leftSidePredict;
    leftSidePredict = newLeftSidePredict;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MLRegressionPackage.LINE_REGRESS__LEFT_SIDE_PREDICT, oldLeftSidePredict, leftSidePredict));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MLRegressionPackage.LINE_REGRESS__LEFT_SIDE_PREDICT:
        return getLeftSidePredict();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MLRegressionPackage.LINE_REGRESS__LEFT_SIDE_PREDICT:
        setLeftSidePredict((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MLRegressionPackage.LINE_REGRESS__LEFT_SIDE_PREDICT:
        setLeftSidePredict(LEFT_SIDE_PREDICT_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MLRegressionPackage.LINE_REGRESS__LEFT_SIDE_PREDICT:
        return LEFT_SIDE_PREDICT_EDEFAULT == null ? leftSidePredict != null : !LEFT_SIDE_PREDICT_EDEFAULT.equals(leftSidePredict);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (leftSidePredict: ");
    result.append(leftSidePredict);
    result.append(')');
    return result.toString();
  }

} //LineRegressImpl
