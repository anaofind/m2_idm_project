/**
 * generated by Xtext 2.23.0
 */
package m2.idm.project.mLRegression.impl;

import java.util.Collection;

import m2.idm.project.mLRegression.ListePredictiveVar;
import m2.idm.project.mLRegression.MLRegressionPackage;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Liste Predictive Var</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link m2.idm.project.mLRegression.impl.ListePredictiveVarImpl#getVarPred <em>Var Pred</em>}</li>
 *   <li>{@link m2.idm.project.mLRegression.impl.ListePredictiveVarImpl#getPredVar <em>Pred Var</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ListePredictiveVarImpl extends MinimalEObjectImpl.Container implements ListePredictiveVar
{
  /**
   * The default value of the '{@link #getVarPred() <em>Var Pred</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVarPred()
   * @generated
   * @ordered
   */
  protected static final String VAR_PRED_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getVarPred() <em>Var Pred</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVarPred()
   * @generated
   * @ordered
   */
  protected String varPred = VAR_PRED_EDEFAULT;

  /**
   * The cached value of the '{@link #getPredVar() <em>Pred Var</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPredVar()
   * @generated
   * @ordered
   */
  protected EList<String> predVar;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ListePredictiveVarImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MLRegressionPackage.Literals.LISTE_PREDICTIVE_VAR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getVarPred()
  {
    return varPred;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVarPred(String newVarPred)
  {
    String oldVarPred = varPred;
    varPred = newVarPred;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MLRegressionPackage.LISTE_PREDICTIVE_VAR__VAR_PRED, oldVarPred, varPred));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getPredVar()
  {
    if (predVar == null)
    {
      predVar = new EDataTypeEList<String>(String.class, this, MLRegressionPackage.LISTE_PREDICTIVE_VAR__PRED_VAR);
    }
    return predVar;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MLRegressionPackage.LISTE_PREDICTIVE_VAR__VAR_PRED:
        return getVarPred();
      case MLRegressionPackage.LISTE_PREDICTIVE_VAR__PRED_VAR:
        return getPredVar();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MLRegressionPackage.LISTE_PREDICTIVE_VAR__VAR_PRED:
        setVarPred((String)newValue);
        return;
      case MLRegressionPackage.LISTE_PREDICTIVE_VAR__PRED_VAR:
        getPredVar().clear();
        getPredVar().addAll((Collection<? extends String>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MLRegressionPackage.LISTE_PREDICTIVE_VAR__VAR_PRED:
        setVarPred(VAR_PRED_EDEFAULT);
        return;
      case MLRegressionPackage.LISTE_PREDICTIVE_VAR__PRED_VAR:
        getPredVar().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MLRegressionPackage.LISTE_PREDICTIVE_VAR__VAR_PRED:
        return VAR_PRED_EDEFAULT == null ? varPred != null : !VAR_PRED_EDEFAULT.equals(varPred);
      case MLRegressionPackage.LISTE_PREDICTIVE_VAR__PRED_VAR:
        return predVar != null && !predVar.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (varPred: ");
    result.append(varPred);
    result.append(", predVar: ");
    result.append(predVar);
    result.append(')');
    return result.toString();
  }

} //ListePredictiveVarImpl
