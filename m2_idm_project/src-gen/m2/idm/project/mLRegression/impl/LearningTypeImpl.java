/**
 * generated by Xtext 2.23.0
 */
package m2.idm.project.mLRegression.impl;

import m2.idm.project.mLRegression.LearningType;
import m2.idm.project.mLRegression.MLRegressionPackage;
import m2.idm.project.mLRegression.Training;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Learning Type</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link m2.idm.project.mLRegression.impl.LearningTypeImpl#getTraining <em>Training</em>}</li>
 *   <li>{@link m2.idm.project.mLRegression.impl.LearningTypeImpl#getCrossValidation <em>Cross Validation</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LearningTypeImpl extends MinimalEObjectImpl.Container implements LearningType
{
  /**
   * The cached value of the '{@link #getTraining() <em>Training</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTraining()
   * @generated
   * @ordered
   */
  protected Training training;

  /**
   * The default value of the '{@link #getCrossValidation() <em>Cross Validation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCrossValidation()
   * @generated
   * @ordered
   */
  protected static final String CROSS_VALIDATION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCrossValidation() <em>Cross Validation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCrossValidation()
   * @generated
   * @ordered
   */
  protected String crossValidation = CROSS_VALIDATION_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LearningTypeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MLRegressionPackage.Literals.LEARNING_TYPE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Training getTraining()
  {
    return training;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTraining(Training newTraining, NotificationChain msgs)
  {
    Training oldTraining = training;
    training = newTraining;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MLRegressionPackage.LEARNING_TYPE__TRAINING, oldTraining, newTraining);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTraining(Training newTraining)
  {
    if (newTraining != training)
    {
      NotificationChain msgs = null;
      if (training != null)
        msgs = ((InternalEObject)training).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MLRegressionPackage.LEARNING_TYPE__TRAINING, null, msgs);
      if (newTraining != null)
        msgs = ((InternalEObject)newTraining).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MLRegressionPackage.LEARNING_TYPE__TRAINING, null, msgs);
      msgs = basicSetTraining(newTraining, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MLRegressionPackage.LEARNING_TYPE__TRAINING, newTraining, newTraining));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getCrossValidation()
  {
    return crossValidation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCrossValidation(String newCrossValidation)
  {
    String oldCrossValidation = crossValidation;
    crossValidation = newCrossValidation;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MLRegressionPackage.LEARNING_TYPE__CROSS_VALIDATION, oldCrossValidation, crossValidation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MLRegressionPackage.LEARNING_TYPE__TRAINING:
        return basicSetTraining(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MLRegressionPackage.LEARNING_TYPE__TRAINING:
        return getTraining();
      case MLRegressionPackage.LEARNING_TYPE__CROSS_VALIDATION:
        return getCrossValidation();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MLRegressionPackage.LEARNING_TYPE__TRAINING:
        setTraining((Training)newValue);
        return;
      case MLRegressionPackage.LEARNING_TYPE__CROSS_VALIDATION:
        setCrossValidation((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MLRegressionPackage.LEARNING_TYPE__TRAINING:
        setTraining((Training)null);
        return;
      case MLRegressionPackage.LEARNING_TYPE__CROSS_VALIDATION:
        setCrossValidation(CROSS_VALIDATION_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MLRegressionPackage.LEARNING_TYPE__TRAINING:
        return training != null;
      case MLRegressionPackage.LEARNING_TYPE__CROSS_VALIDATION:
        return CROSS_VALIDATION_EDEFAULT == null ? crossValidation != null : !CROSS_VALIDATION_EDEFAULT.equals(crossValidation);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (crossValidation: ");
    result.append(crossValidation);
    result.append(')');
    return result.toString();
  }

} //LearningTypeImpl
