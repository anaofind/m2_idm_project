/**
 * generated by Xtext 2.23.0
 */
package m2.idm.project.mLRegression.impl;

import m2.idm.project.mLRegression.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MLRegressionFactoryImpl extends EFactoryImpl implements MLRegressionFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MLRegressionFactory init()
  {
    try
    {
      MLRegressionFactory theMLRegressionFactory = (MLRegressionFactory)EPackage.Registry.INSTANCE.getEFactory(MLRegressionPackage.eNS_URI);
      if (theMLRegressionFactory != null)
      {
        return theMLRegressionFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MLRegressionFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MLRegressionFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MLRegressionPackage.ML_REGRESSION: return createMLRegression();
      case MLRegressionPackage.DATASET: return createDataset();
      case MLRegressionPackage.LEARNING_TYPE: return createLearningType();
      case MLRegressionPackage.TRAINING: return createTraining();
      case MLRegressionPackage.VARIABLES: return createVariables();
      case MLRegressionPackage.PREDICTIVES: return createPredictives();
      case MLRegressionPackage.TARGETS: return createTargets();
      case MLRegressionPackage.VAR: return createVar();
      case MLRegressionPackage.RETURN_TYPE: return createReturnType();
      case MLRegressionPackage.TYPE_VALUE: return createTypeValue();
      case MLRegressionPackage.STRING_VALUE: return createStringValue();
      case MLRegressionPackage.NUMBER_VALUE: return createNumberValue();
      case MLRegressionPackage.PERCENT_VALUE: return createPercentValue();
      case MLRegressionPackage.BOOLEAN_VALUE: return createBooleanValue();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MLRegression createMLRegression()
  {
    MLRegressionImpl mlRegression = new MLRegressionImpl();
    return mlRegression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Dataset createDataset()
  {
    DatasetImpl dataset = new DatasetImpl();
    return dataset;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LearningType createLearningType()
  {
    LearningTypeImpl learningType = new LearningTypeImpl();
    return learningType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Training createTraining()
  {
    TrainingImpl training = new TrainingImpl();
    return training;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Variables createVariables()
  {
    VariablesImpl variables = new VariablesImpl();
    return variables;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Predictives createPredictives()
  {
    PredictivesImpl predictives = new PredictivesImpl();
    return predictives;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Targets createTargets()
  {
    TargetsImpl targets = new TargetsImpl();
    return targets;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Var createVar()
  {
    VarImpl var = new VarImpl();
    return var;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReturnType createReturnType()
  {
    ReturnTypeImpl returnType = new ReturnTypeImpl();
    return returnType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TypeValue createTypeValue()
  {
    TypeValueImpl typeValue = new TypeValueImpl();
    return typeValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringValue createStringValue()
  {
    StringValueImpl stringValue = new StringValueImpl();
    return stringValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NumberValue createNumberValue()
  {
    NumberValueImpl numberValue = new NumberValueImpl();
    return numberValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PercentValue createPercentValue()
  {
    PercentValueImpl percentValue = new PercentValueImpl();
    return percentValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BooleanValue createBooleanValue()
  {
    BooleanValueImpl booleanValue = new BooleanValueImpl();
    return booleanValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MLRegressionPackage getMLRegressionPackage()
  {
    return (MLRegressionPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MLRegressionPackage getPackage()
  {
    return MLRegressionPackage.eINSTANCE;
  }

} //MLRegressionFactoryImpl
