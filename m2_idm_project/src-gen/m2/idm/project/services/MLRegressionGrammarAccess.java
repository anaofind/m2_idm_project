/*
 * generated by Xtext 2.23.0
 */
package m2.idm.project.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MLRegressionGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class MLRegressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.MLRegression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDatasetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDatasetDatasetParserRuleCall_0_0 = (RuleCall)cDatasetAssignment_0.eContents().get(0);
		private final Assignment cEvaluationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEvaluationEvaluationTypeParserRuleCall_1_0 = (RuleCall)cEvaluationAssignment_1.eContents().get(0);
		private final Assignment cVarsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarsVariablesParserRuleCall_2_0 = (RuleCall)cVarsAssignment_2.eContents().get(0);
		private final Assignment cCalculateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCalculateCalculateParserRuleCall_3_0 = (RuleCall)cCalculateAssignment_3.eContents().get(0);
		private final Assignment cAlgoAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAlgoAlgoParserRuleCall_4_0 = (RuleCall)cAlgoAssignment_4.eContents().get(0);
		
		//MLRegression:
		//	dataset=Dataset
		//	evaluation=EvaluationType
		//	vars=Variables?
		//	calculate=Calculate
		//	algo=Algo;
		@Override public ParserRule getRule() { return rule; }
		
		//dataset=Dataset evaluation=EvaluationType vars=Variables? calculate=Calculate algo=Algo
		public Group getGroup() { return cGroup; }
		
		//dataset=Dataset
		public Assignment getDatasetAssignment_0() { return cDatasetAssignment_0; }
		
		//Dataset
		public RuleCall getDatasetDatasetParserRuleCall_0_0() { return cDatasetDatasetParserRuleCall_0_0; }
		
		//evaluation=EvaluationType
		public Assignment getEvaluationAssignment_1() { return cEvaluationAssignment_1; }
		
		//EvaluationType
		public RuleCall getEvaluationEvaluationTypeParserRuleCall_1_0() { return cEvaluationEvaluationTypeParserRuleCall_1_0; }
		
		//vars=Variables?
		public Assignment getVarsAssignment_2() { return cVarsAssignment_2; }
		
		//Variables
		public RuleCall getVarsVariablesParserRuleCall_2_0() { return cVarsVariablesParserRuleCall_2_0; }
		
		//calculate=Calculate
		public Assignment getCalculateAssignment_3() { return cCalculateAssignment_3; }
		
		//Calculate
		public RuleCall getCalculateCalculateParserRuleCall_3_0() { return cCalculateCalculateParserRuleCall_3_0; }
		
		//algo=Algo
		public Assignment getAlgoAssignment_4() { return cAlgoAssignment_4; }
		
		//Algo
		public RuleCall getAlgoAlgoParserRuleCall_4_0() { return cAlgoAlgoParserRuleCall_4_0; }
	}
	public class CalculateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.Calculate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCalculateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCalculateTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCalculateTypeCalculateTypeParserRuleCall_2_0 = (RuleCall)cCalculateTypeAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Calculate:
		//	'calculate' ':' calculateType=CalculateType ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'calculate' ':' calculateType=CalculateType ';'
		public Group getGroup() { return cGroup; }
		
		//'calculate'
		public Keyword getCalculateKeyword_0() { return cCalculateKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//calculateType=CalculateType
		public Assignment getCalculateTypeAssignment_2() { return cCalculateTypeAssignment_2; }
		
		//CalculateType
		public RuleCall getCalculateTypeCalculateTypeParserRuleCall_2_0() { return cCalculateTypeCalculateTypeParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class CalculateTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.CalculateType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMinErrorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMinSquaredErrorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSumsSquaredErrorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//CalculateType:
		//	MinError | MinSquaredError | SumsSquaredError;
		@Override public ParserRule getRule() { return rule; }
		
		//MinError | MinSquaredError | SumsSquaredError
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MinError
		public RuleCall getMinErrorParserRuleCall_0() { return cMinErrorParserRuleCall_0; }
		
		//MinSquaredError
		public RuleCall getMinSquaredErrorParserRuleCall_1() { return cMinSquaredErrorParserRuleCall_1; }
		
		//SumsSquaredError
		public RuleCall getSumsSquaredErrorParserRuleCall_2() { return cSumsSquaredErrorParserRuleCall_2; }
	}
	public class DatasetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.Dataset");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDatasetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cDatasetImportKeyword_0_0 = (Keyword)cDatasetAssignment_0.eContents().get(0);
		private final Assignment cDataAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDataStringValueParserRuleCall_1_0 = (RuleCall)cDataAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Dataset:
		//	dataset='import' data=StringValue ';';
		@Override public ParserRule getRule() { return rule; }
		
		//dataset='import' data=StringValue ';'
		public Group getGroup() { return cGroup; }
		
		//dataset='import'
		public Assignment getDatasetAssignment_0() { return cDatasetAssignment_0; }
		
		//'import'
		public Keyword getDatasetImportKeyword_0_0() { return cDatasetImportKeyword_0_0; }
		
		//data=StringValue
		public Assignment getDataAssignment_1() { return cDataAssignment_1; }
		
		//StringValue
		public RuleCall getDataStringValueParserRuleCall_1_0() { return cDataStringValueParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class EvaluationTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.EvaluationType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPartitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCrossValidationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EvaluationType:
		//	Partition | CrossValidation;
		@Override public ParserRule getRule() { return rule; }
		
		//Partition | CrossValidation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Partition
		public RuleCall getPartitionParserRuleCall_0() { return cPartitionParserRuleCall_0; }
		
		//CrossValidation
		public RuleCall getCrossValidationParserRuleCall_1() { return cCrossValidationParserRuleCall_1; }
	}
	public class PartitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.Partition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPartitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTrainAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTrainNumericValueParserRuleCall_2_0 = (RuleCall)cTrainAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTestAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTestNumericValueParserRuleCall_4_0 = (RuleCall)cTestAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Partition:
		//	'partition' ':' train=NumericValue ',' test=NumericValue ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'partition' ':' train=NumericValue ',' test=NumericValue ';'
		public Group getGroup() { return cGroup; }
		
		//'partition'
		public Keyword getPartitionKeyword_0() { return cPartitionKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//train=NumericValue
		public Assignment getTrainAssignment_2() { return cTrainAssignment_2; }
		
		//NumericValue
		public RuleCall getTrainNumericValueParserRuleCall_2_0() { return cTrainNumericValueParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//test=NumericValue
		public Assignment getTestAssignment_4() { return cTestAssignment_4; }
		
		//NumericValue
		public RuleCall getTestNumericValueParserRuleCall_4_0() { return cTestNumericValueParserRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class CrossValidationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.CrossValidation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCross_validationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cKAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cKIntegerValueParserRuleCall_2_0 = (RuleCall)cKAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CrossValidation:
		//	'cross_validation' ':' k=IntegerValue ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'cross_validation' ':' k=IntegerValue ';'
		public Group getGroup() { return cGroup; }
		
		//'cross_validation'
		public Keyword getCross_validationKeyword_0() { return cCross_validationKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//k=IntegerValue
		public Assignment getKAssignment_2() { return cKAssignment_2; }
		
		//IntegerValue
		public RuleCall getKIntegerValueParserRuleCall_2_0() { return cKIntegerValueParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class VariablesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.Variables");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPredictivesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPredictivesListePredictiveVarParserRuleCall_0_0 = (RuleCall)cPredictivesAssignment_0.eContents().get(0);
		private final Assignment cTargetsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTargetsTargetVarParserRuleCall_1_0 = (RuleCall)cTargetsAssignment_1.eContents().get(0);
		
		//Variables:
		//	predictives=ListePredictiveVar targets=TargetVar;
		@Override public ParserRule getRule() { return rule; }
		
		//predictives=ListePredictiveVar targets=TargetVar
		public Group getGroup() { return cGroup; }
		
		//predictives=ListePredictiveVar
		public Assignment getPredictivesAssignment_0() { return cPredictivesAssignment_0; }
		
		//ListePredictiveVar
		public RuleCall getPredictivesListePredictiveVarParserRuleCall_0_0() { return cPredictivesListePredictiveVarParserRuleCall_0_0; }
		
		//targets=TargetVar
		public Assignment getTargetsAssignment_1() { return cTargetsAssignment_1; }
		
		//TargetVar
		public RuleCall getTargetsTargetVarParserRuleCall_1_0() { return cTargetsTargetVarParserRuleCall_1_0; }
	}
	public class ListePredictiveVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.ListePredictiveVar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPredictive_varsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVarsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarsSTRINGTerminalRuleCall_2_0 = (RuleCall)cVarsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cVarsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cVarsSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cVarsAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ListePredictiveVar:
		//	'predictive_vars' ':' vars+=STRING (',' vars+=STRING)* ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'predictive_vars' ':' vars+=STRING (',' vars+=STRING)* ';'
		public Group getGroup() { return cGroup; }
		
		//'predictive_vars'
		public Keyword getPredictive_varsKeyword_0() { return cPredictive_varsKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//vars+=STRING
		public Assignment getVarsAssignment_2() { return cVarsAssignment_2; }
		
		//STRING
		public RuleCall getVarsSTRINGTerminalRuleCall_2_0() { return cVarsSTRINGTerminalRuleCall_2_0; }
		
		//(',' vars+=STRING)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//vars+=STRING
		public Assignment getVarsAssignment_3_1() { return cVarsAssignment_3_1; }
		
		//STRING
		public RuleCall getVarsSTRINGTerminalRuleCall_3_1_0() { return cVarsSTRINGTerminalRuleCall_3_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class TargetVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.TargetVar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTarget_varKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarStringValueParserRuleCall_2_0 = (RuleCall)cVarAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TargetVar:
		//	'target_var' ':' var=StringValue ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'target_var' ':' var=StringValue ';'
		public Group getGroup() { return cGroup; }
		
		//'target_var'
		public Keyword getTarget_varKeyword_0() { return cTarget_varKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//var=StringValue
		public Assignment getVarAssignment_2() { return cVarAssignment_2; }
		
		//StringValue
		public RuleCall getVarStringValueParserRuleCall_2_0() { return cVarStringValueParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class AlgoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.Algo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAlgorithmKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAlgoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAlgoAlgoMLParserRuleCall_2_0 = (RuleCall)cAlgoAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Algo:
		//	'algorithm' ':' algo=AlgoML ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'algorithm' ':' algo=AlgoML ';'
		public Group getGroup() { return cGroup; }
		
		//'algorithm'
		public Keyword getAlgorithmKeyword_0() { return cAlgorithmKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//algo=AlgoML
		public Assignment getAlgoAssignment_2() { return cAlgoAssignment_2; }
		
		//AlgoML
		public RuleCall getAlgoAlgoMLParserRuleCall_2_0() { return cAlgoAlgoMLParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class AlgoMLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.AlgoML");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLineRegressParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSVRParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDecisionTreeRegressorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AlgoML:
		//	LineRegress | SVR | DecisionTreeRegressor;
		@Override public ParserRule getRule() { return rule; }
		
		//LineRegress | SVR | DecisionTreeRegressor
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LineRegress
		public RuleCall getLineRegressParserRuleCall_0() { return cLineRegressParserRuleCall_0; }
		
		//SVR
		public RuleCall getSVRParserRuleCall_1() { return cSVRParserRuleCall_1; }
		
		//DecisionTreeRegressor
		public RuleCall getDecisionTreeRegressorParserRuleCall_2() { return cDecisionTreeRegressorParserRuleCall_2; }
	}
	public class LineRegressElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.LineRegress");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLine_regressKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cColumnsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cColumnsSTRINGTerminalRuleCall_2_0 = (RuleCall)cColumnsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cColumnsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cColumnsSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cColumnsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//LineRegress:
		//	'line_regress' '(' columns+=STRING (',' columns+=STRING)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'line_regress' '(' columns+=STRING (',' columns+=STRING)* ')'
		public Group getGroup() { return cGroup; }
		
		//'line_regress'
		public Keyword getLine_regressKeyword_0() { return cLine_regressKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//columns+=STRING
		public Assignment getColumnsAssignment_2() { return cColumnsAssignment_2; }
		
		//STRING
		public RuleCall getColumnsSTRINGTerminalRuleCall_2_0() { return cColumnsSTRINGTerminalRuleCall_2_0; }
		
		//(',' columns+=STRING)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//columns+=STRING
		public Assignment getColumnsAssignment_3_1() { return cColumnsAssignment_3_1; }
		
		//STRING
		public RuleCall getColumnsSTRINGTerminalRuleCall_3_1_0() { return cColumnsSTRINGTerminalRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class DecisionTreeRegressorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.DecisionTreeRegressor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDecision_tree_regressorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRandAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRandINTTerminalRuleCall_2_0 = (RuleCall)cRandAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DecisionTreeRegressor:
		//	'decision_tree_regressor' '(' rand=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'decision_tree_regressor' '(' rand=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'decision_tree_regressor'
		public Keyword getDecision_tree_regressorKeyword_0() { return cDecision_tree_regressorKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//rand=INT
		public Assignment getRandAssignment_2() { return cRandAssignment_2; }
		
		//INT
		public RuleCall getRandINTTerminalRuleCall_2_0() { return cRandINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class SVRElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.SVR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSvrKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParamAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParamIDTerminalRuleCall_2_0 = (RuleCall)cParamAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SVR:
		//	'svr' '(' param=ID ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'svr' '(' param=ID ')'
		public Group getGroup() { return cGroup; }
		
		//'svr'
		public Keyword getSvrKeyword_0() { return cSvrKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//param=ID
		public Assignment getParamAssignment_2() { return cParamAssignment_2; }
		
		//ID
		public RuleCall getParamIDTerminalRuleCall_2_0() { return cParamIDTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class MinErrorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.MinError");
		private final Keyword cMin_errorKeyword = (Keyword)rule.eContents().get(1);
		
		//MinError:
		//	'min_error';
		@Override public ParserRule getRule() { return rule; }
		
		//'min_error'
		public Keyword getMin_errorKeyword() { return cMin_errorKeyword; }
	}
	public class MinSquaredErrorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.MinSquaredError");
		private final Keyword cMin_square_errorKeyword = (Keyword)rule.eContents().get(1);
		
		//MinSquaredError:
		//	'min_square_error';
		@Override public ParserRule getRule() { return rule; }
		
		//'min_square_error'
		public Keyword getMin_square_errorKeyword() { return cMin_square_errorKeyword; }
	}
	public class SumsSquaredErrorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.SumsSquaredError");
		private final Keyword cSums_square_errorKeyword = (Keyword)rule.eContents().get(1);
		
		//SumsSquaredError:
		//	'sums_square_error';
		@Override public ParserRule getRule() { return rule; }
		
		//'sums_square_error'
		public Keyword getSums_square_errorKeyword() { return cSums_square_errorKeyword; }
	}
	public class TypeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.TypeValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumericValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPercentValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBooleanValueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//TypeValue:
		//	StringValue | NumericValue | PercentValue | BooleanValue;
		@Override public ParserRule getRule() { return rule; }
		
		//StringValue | NumericValue | PercentValue | BooleanValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StringValue
		public RuleCall getStringValueParserRuleCall_0() { return cStringValueParserRuleCall_0; }
		
		//NumericValue
		public RuleCall getNumericValueParserRuleCall_1() { return cNumericValueParserRuleCall_1; }
		
		//PercentValue
		public RuleCall getPercentValueParserRuleCall_2() { return cPercentValueParserRuleCall_2; }
		
		//BooleanValue
		public RuleCall getBooleanValueParserRuleCall_3() { return cBooleanValueParserRuleCall_3; }
	}
	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.StringValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringValue:
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class NumericValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.NumericValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumberValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPercentValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NumericValue:
		//	NumberValue | PercentValue;
		@Override public ParserRule getRule() { return rule; }
		
		//NumberValue | PercentValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NumberValue
		public RuleCall getNumberValueParserRuleCall_0() { return cNumberValueParserRuleCall_0; }
		
		//PercentValue
		public RuleCall getPercentValueParserRuleCall_1() { return cPercentValueParserRuleCall_1; }
	}
	public class NumberValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.NumberValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDecimalAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDecimalINTTerminalRuleCall_1_1_0 = (RuleCall)cDecimalAssignment_1_1.eContents().get(0);
		
		//NumberValue:
		//	value=INT ('.' decimal+=INT*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT ('.' decimal+=INT*)?
		public Group getGroup() { return cGroup; }
		
		//value=INT
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_0() { return cValueINTTerminalRuleCall_0_0; }
		
		//('.' decimal+=INT*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//decimal+=INT*
		public Assignment getDecimalAssignment_1_1() { return cDecimalAssignment_1_1; }
		
		//INT
		public RuleCall getDecimalINTTerminalRuleCall_1_1_0() { return cDecimalINTTerminalRuleCall_1_1_0; }
	}
	public class IntegerValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.IntegerValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntegerValue:
		//	value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class PercentValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.PercentValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNumberValueParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cPercentSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//PercentValue:
		//	NumberValue '%';
		@Override public ParserRule getRule() { return rule; }
		
		//NumberValue '%'
		public Group getGroup() { return cGroup; }
		
		//NumberValue
		public RuleCall getNumberValueParserRuleCall_0() { return cNumberValueParserRuleCall_0; }
		
		//'%'
		public Keyword getPercentSignKeyword_1() { return cPercentSignKeyword_1; }
	}
	public class BooleanValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.BooleanValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final Keyword cValueFalseKeyword_0_0 = (Keyword)cValueAlternatives_0.eContents().get(0);
		private final Keyword cValueTrueKeyword_0_1 = (Keyword)cValueAlternatives_0.eContents().get(1);
		
		//BooleanValue:
		//	value=('false' | 'true');
		@Override public ParserRule getRule() { return rule; }
		
		//value=('false' | 'true')
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//('false' | 'true')
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }
		
		//'false'
		public Keyword getValueFalseKeyword_0_0() { return cValueFalseKeyword_0_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_0_1() { return cValueTrueKeyword_0_1; }
	}
	
	
	private final MLRegressionElements pMLRegression;
	private final CalculateElements pCalculate;
	private final CalculateTypeElements pCalculateType;
	private final DatasetElements pDataset;
	private final EvaluationTypeElements pEvaluationType;
	private final PartitionElements pPartition;
	private final CrossValidationElements pCrossValidation;
	private final VariablesElements pVariables;
	private final ListePredictiveVarElements pListePredictiveVar;
	private final TargetVarElements pTargetVar;
	private final AlgoElements pAlgo;
	private final AlgoMLElements pAlgoML;
	private final LineRegressElements pLineRegress;
	private final DecisionTreeRegressorElements pDecisionTreeRegressor;
	private final SVRElements pSVR;
	private final MinErrorElements pMinError;
	private final MinSquaredErrorElements pMinSquaredError;
	private final SumsSquaredErrorElements pSumsSquaredError;
	private final TypeValueElements pTypeValue;
	private final StringValueElements pStringValue;
	private final NumericValueElements pNumericValue;
	private final NumberValueElements pNumberValue;
	private final IntegerValueElements pIntegerValue;
	private final PercentValueElements pPercentValue;
	private final BooleanValueElements pBooleanValue;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MLRegressionGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMLRegression = new MLRegressionElements();
		this.pCalculate = new CalculateElements();
		this.pCalculateType = new CalculateTypeElements();
		this.pDataset = new DatasetElements();
		this.pEvaluationType = new EvaluationTypeElements();
		this.pPartition = new PartitionElements();
		this.pCrossValidation = new CrossValidationElements();
		this.pVariables = new VariablesElements();
		this.pListePredictiveVar = new ListePredictiveVarElements();
		this.pTargetVar = new TargetVarElements();
		this.pAlgo = new AlgoElements();
		this.pAlgoML = new AlgoMLElements();
		this.pLineRegress = new LineRegressElements();
		this.pDecisionTreeRegressor = new DecisionTreeRegressorElements();
		this.pSVR = new SVRElements();
		this.pMinError = new MinErrorElements();
		this.pMinSquaredError = new MinSquaredErrorElements();
		this.pSumsSquaredError = new SumsSquaredErrorElements();
		this.pTypeValue = new TypeValueElements();
		this.pStringValue = new StringValueElements();
		this.pNumericValue = new NumericValueElements();
		this.pNumberValue = new NumberValueElements();
		this.pIntegerValue = new IntegerValueElements();
		this.pPercentValue = new PercentValueElements();
		this.pBooleanValue = new BooleanValueElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("m2.idm.project.MLRegression".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//MLRegression:
	//	dataset=Dataset
	//	evaluation=EvaluationType
	//	vars=Variables?
	//	calculate=Calculate
	//	algo=Algo;
	public MLRegressionElements getMLRegressionAccess() {
		return pMLRegression;
	}
	
	public ParserRule getMLRegressionRule() {
		return getMLRegressionAccess().getRule();
	}
	
	//Calculate:
	//	'calculate' ':' calculateType=CalculateType ';';
	public CalculateElements getCalculateAccess() {
		return pCalculate;
	}
	
	public ParserRule getCalculateRule() {
		return getCalculateAccess().getRule();
	}
	
	//CalculateType:
	//	MinError | MinSquaredError | SumsSquaredError;
	public CalculateTypeElements getCalculateTypeAccess() {
		return pCalculateType;
	}
	
	public ParserRule getCalculateTypeRule() {
		return getCalculateTypeAccess().getRule();
	}
	
	//Dataset:
	//	dataset='import' data=StringValue ';';
	public DatasetElements getDatasetAccess() {
		return pDataset;
	}
	
	public ParserRule getDatasetRule() {
		return getDatasetAccess().getRule();
	}
	
	//EvaluationType:
	//	Partition | CrossValidation;
	public EvaluationTypeElements getEvaluationTypeAccess() {
		return pEvaluationType;
	}
	
	public ParserRule getEvaluationTypeRule() {
		return getEvaluationTypeAccess().getRule();
	}
	
	//Partition:
	//	'partition' ':' train=NumericValue ',' test=NumericValue ';';
	public PartitionElements getPartitionAccess() {
		return pPartition;
	}
	
	public ParserRule getPartitionRule() {
		return getPartitionAccess().getRule();
	}
	
	//CrossValidation:
	//	'cross_validation' ':' k=IntegerValue ';';
	public CrossValidationElements getCrossValidationAccess() {
		return pCrossValidation;
	}
	
	public ParserRule getCrossValidationRule() {
		return getCrossValidationAccess().getRule();
	}
	
	//Variables:
	//	predictives=ListePredictiveVar targets=TargetVar;
	public VariablesElements getVariablesAccess() {
		return pVariables;
	}
	
	public ParserRule getVariablesRule() {
		return getVariablesAccess().getRule();
	}
	
	//ListePredictiveVar:
	//	'predictive_vars' ':' vars+=STRING (',' vars+=STRING)* ';';
	public ListePredictiveVarElements getListePredictiveVarAccess() {
		return pListePredictiveVar;
	}
	
	public ParserRule getListePredictiveVarRule() {
		return getListePredictiveVarAccess().getRule();
	}
	
	//TargetVar:
	//	'target_var' ':' var=StringValue ';';
	public TargetVarElements getTargetVarAccess() {
		return pTargetVar;
	}
	
	public ParserRule getTargetVarRule() {
		return getTargetVarAccess().getRule();
	}
	
	//Algo:
	//	'algorithm' ':' algo=AlgoML ';';
	public AlgoElements getAlgoAccess() {
		return pAlgo;
	}
	
	public ParserRule getAlgoRule() {
		return getAlgoAccess().getRule();
	}
	
	//AlgoML:
	//	LineRegress | SVR | DecisionTreeRegressor;
	public AlgoMLElements getAlgoMLAccess() {
		return pAlgoML;
	}
	
	public ParserRule getAlgoMLRule() {
		return getAlgoMLAccess().getRule();
	}
	
	//LineRegress:
	//	'line_regress' '(' columns+=STRING (',' columns+=STRING)* ')';
	public LineRegressElements getLineRegressAccess() {
		return pLineRegress;
	}
	
	public ParserRule getLineRegressRule() {
		return getLineRegressAccess().getRule();
	}
	
	//DecisionTreeRegressor:
	//	'decision_tree_regressor' '(' rand=INT ')';
	public DecisionTreeRegressorElements getDecisionTreeRegressorAccess() {
		return pDecisionTreeRegressor;
	}
	
	public ParserRule getDecisionTreeRegressorRule() {
		return getDecisionTreeRegressorAccess().getRule();
	}
	
	//SVR:
	//	'svr' '(' param=ID ')';
	public SVRElements getSVRAccess() {
		return pSVR;
	}
	
	public ParserRule getSVRRule() {
		return getSVRAccess().getRule();
	}
	
	//MinError:
	//	'min_error';
	public MinErrorElements getMinErrorAccess() {
		return pMinError;
	}
	
	public ParserRule getMinErrorRule() {
		return getMinErrorAccess().getRule();
	}
	
	//MinSquaredError:
	//	'min_square_error';
	public MinSquaredErrorElements getMinSquaredErrorAccess() {
		return pMinSquaredError;
	}
	
	public ParserRule getMinSquaredErrorRule() {
		return getMinSquaredErrorAccess().getRule();
	}
	
	//SumsSquaredError:
	//	'sums_square_error';
	public SumsSquaredErrorElements getSumsSquaredErrorAccess() {
		return pSumsSquaredError;
	}
	
	public ParserRule getSumsSquaredErrorRule() {
		return getSumsSquaredErrorAccess().getRule();
	}
	
	//TypeValue:
	//	StringValue | NumericValue | PercentValue | BooleanValue;
	public TypeValueElements getTypeValueAccess() {
		return pTypeValue;
	}
	
	public ParserRule getTypeValueRule() {
		return getTypeValueAccess().getRule();
	}
	
	//StringValue:
	//	value=STRING;
	public StringValueElements getStringValueAccess() {
		return pStringValue;
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}
	
	//NumericValue:
	//	NumberValue | PercentValue;
	public NumericValueElements getNumericValueAccess() {
		return pNumericValue;
	}
	
	public ParserRule getNumericValueRule() {
		return getNumericValueAccess().getRule();
	}
	
	//NumberValue:
	//	value=INT ('.' decimal+=INT*)?;
	public NumberValueElements getNumberValueAccess() {
		return pNumberValue;
	}
	
	public ParserRule getNumberValueRule() {
		return getNumberValueAccess().getRule();
	}
	
	//IntegerValue:
	//	value=INT;
	public IntegerValueElements getIntegerValueAccess() {
		return pIntegerValue;
	}
	
	public ParserRule getIntegerValueRule() {
		return getIntegerValueAccess().getRule();
	}
	
	//PercentValue:
	//	NumberValue '%';
	public PercentValueElements getPercentValueAccess() {
		return pPercentValue;
	}
	
	public ParserRule getPercentValueRule() {
		return getPercentValueAccess().getRule();
	}
	
	//BooleanValue:
	//	value=('false' | 'true');
	public BooleanValueElements getBooleanValueAccess() {
		return pBooleanValue;
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
