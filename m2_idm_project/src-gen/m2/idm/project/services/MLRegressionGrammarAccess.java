/*
 * generated by Xtext 2.23.0
 */
package m2.idm.project.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MLRegressionGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLanguageTargetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLanguageTargetLanguageTargetParserRuleCall_0_0 = (RuleCall)cLanguageTargetAssignment_0.eContents().get(0);
		private final Assignment cMlAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMlMLRegressionParserRuleCall_1_0 = (RuleCall)cMlAssignment_1.eContents().get(0);
		
		//Model:
		//	languageTarget=LanguageTarget? ml=MLRegression;
		@Override public ParserRule getRule() { return rule; }
		
		//languageTarget=LanguageTarget? ml=MLRegression
		public Group getGroup() { return cGroup; }
		
		//languageTarget=LanguageTarget?
		public Assignment getLanguageTargetAssignment_0() { return cLanguageTargetAssignment_0; }
		
		//LanguageTarget
		public RuleCall getLanguageTargetLanguageTargetParserRuleCall_0_0() { return cLanguageTargetLanguageTargetParserRuleCall_0_0; }
		
		//ml=MLRegression
		public Assignment getMlAssignment_1() { return cMlAssignment_1; }
		
		//MLRegression
		public RuleCall getMlMLRegressionParserRuleCall_1_0() { return cMlMLRegressionParserRuleCall_1_0; }
	}
	public class LanguageTargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.LanguageTarget");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTarget_languageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLanguageAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cLanguageAlternatives_2_0 = (Alternatives)cLanguageAssignment_2.eContents().get(0);
		private final RuleCall cLanguagePythonParserRuleCall_2_0_0 = (RuleCall)cLanguageAlternatives_2_0.eContents().get(0);
		private final RuleCall cLanguageRParserRuleCall_2_0_1 = (RuleCall)cLanguageAlternatives_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//LanguageTarget:
		//	'target_language' ':' language=(Python | R) ";";
		@Override public ParserRule getRule() { return rule; }
		
		//'target_language' ':' language=(Python | R) ";"
		public Group getGroup() { return cGroup; }
		
		//'target_language'
		public Keyword getTarget_languageKeyword_0() { return cTarget_languageKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//language=(Python | R)
		public Assignment getLanguageAssignment_2() { return cLanguageAssignment_2; }
		
		//(Python | R)
		public Alternatives getLanguageAlternatives_2_0() { return cLanguageAlternatives_2_0; }
		
		//Python
		public RuleCall getLanguagePythonParserRuleCall_2_0_0() { return cLanguagePythonParserRuleCall_2_0_0; }
		
		//R
		public RuleCall getLanguageRParserRuleCall_2_0_1() { return cLanguageRParserRuleCall_2_0_1; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class PythonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.Python");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPythonKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPythonKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPYTHONKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//Python:
		//	'python' | 'Python' | 'PYTHON';
		@Override public ParserRule getRule() { return rule; }
		
		//'python' | 'Python' | 'PYTHON'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'python'
		public Keyword getPythonKeyword_0() { return cPythonKeyword_0; }
		
		//'Python'
		public Keyword getPythonKeyword_1() { return cPythonKeyword_1; }
		
		//'PYTHON'
		public Keyword getPYTHONKeyword_2() { return cPYTHONKeyword_2; }
	}
	public class RElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.R");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cRKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cRKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//R:
		//	'r' | 'R';
		@Override public ParserRule getRule() { return rule; }
		
		//'r' | 'R'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'r'
		public Keyword getRKeyword_0() { return cRKeyword_0; }
		
		//'R'
		public Keyword getRKeyword_1() { return cRKeyword_1; }
	}
	public class MLRegressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.MLRegression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDatasetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDatasetDatasetParserRuleCall_0_0 = (RuleCall)cDatasetAssignment_0.eContents().get(0);
		private final Assignment cVarsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarsVariablesParserRuleCall_1_0 = (RuleCall)cVarsAssignment_1.eContents().get(0);
		private final Assignment cEvaluationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEvaluationEvaluationTypeParserRuleCall_2_0 = (RuleCall)cEvaluationAssignment_2.eContents().get(0);
		private final Assignment cAlgoAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAlgoAlgoParserRuleCall_3_0 = (RuleCall)cAlgoAssignment_3.eContents().get(0);
		private final Assignment cCalculateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCalculateCalculateParserRuleCall_4_0 = (RuleCall)cCalculateAssignment_4.eContents().get(0);
		private final Assignment cLoopAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLoopLoopParserRuleCall_5_0 = (RuleCall)cLoopAssignment_5.eContents().get(0);
		
		//MLRegression:
		//	dataset=Dataset
		//	vars=Variables?
		//	evaluation=EvaluationType
		//	algo=Algo
		//	calculate=Calculate
		//	loop=Loop?;
		@Override public ParserRule getRule() { return rule; }
		
		//dataset=Dataset vars=Variables? evaluation=EvaluationType algo=Algo calculate=Calculate loop=Loop?
		public Group getGroup() { return cGroup; }
		
		//dataset=Dataset
		public Assignment getDatasetAssignment_0() { return cDatasetAssignment_0; }
		
		//Dataset
		public RuleCall getDatasetDatasetParserRuleCall_0_0() { return cDatasetDatasetParserRuleCall_0_0; }
		
		//vars=Variables?
		public Assignment getVarsAssignment_1() { return cVarsAssignment_1; }
		
		//Variables
		public RuleCall getVarsVariablesParserRuleCall_1_0() { return cVarsVariablesParserRuleCall_1_0; }
		
		//evaluation=EvaluationType
		public Assignment getEvaluationAssignment_2() { return cEvaluationAssignment_2; }
		
		//EvaluationType
		public RuleCall getEvaluationEvaluationTypeParserRuleCall_2_0() { return cEvaluationEvaluationTypeParserRuleCall_2_0; }
		
		//algo=Algo
		public Assignment getAlgoAssignment_3() { return cAlgoAssignment_3; }
		
		//Algo
		public RuleCall getAlgoAlgoParserRuleCall_3_0() { return cAlgoAlgoParserRuleCall_3_0; }
		
		//calculate=Calculate
		public Assignment getCalculateAssignment_4() { return cCalculateAssignment_4; }
		
		//Calculate
		public RuleCall getCalculateCalculateParserRuleCall_4_0() { return cCalculateCalculateParserRuleCall_4_0; }
		
		//loop=Loop?
		public Assignment getLoopAssignment_5() { return cLoopAssignment_5; }
		
		//Loop
		public RuleCall getLoopLoopParserRuleCall_5_0() { return cLoopLoopParserRuleCall_5_0; }
	}
	public class DatasetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.Dataset");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDataPathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDataPathSTRINGTerminalRuleCall_1_0 = (RuleCall)cDataPathAssignment_1.eContents().get(0);
		private final Assignment cSeparatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSeparatorSTRINGTerminalRuleCall_2_0 = (RuleCall)cSeparatorAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Dataset:
		//	'import' dataPath=STRING separator=STRING? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'import' dataPath=STRING separator=STRING? ';'
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//dataPath=STRING
		public Assignment getDataPathAssignment_1() { return cDataPathAssignment_1; }
		
		//STRING
		public RuleCall getDataPathSTRINGTerminalRuleCall_1_0() { return cDataPathSTRINGTerminalRuleCall_1_0; }
		
		//separator=STRING?
		public Assignment getSeparatorAssignment_2() { return cSeparatorAssignment_2; }
		
		//STRING
		public RuleCall getSeparatorSTRINGTerminalRuleCall_2_0() { return cSeparatorSTRINGTerminalRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class VariablesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.Variables");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPredictivesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPredictivesPredictiveVarsParserRuleCall_0_0 = (RuleCall)cPredictivesAssignment_0.eContents().get(0);
		private final Assignment cTargetsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTargetsTargetVarsParserRuleCall_1_0 = (RuleCall)cTargetsAssignment_1.eContents().get(0);
		
		//Variables:
		//	predictives=PredictiveVars targets=TargetVars;
		@Override public ParserRule getRule() { return rule; }
		
		//predictives=PredictiveVars targets=TargetVars
		public Group getGroup() { return cGroup; }
		
		//predictives=PredictiveVars
		public Assignment getPredictivesAssignment_0() { return cPredictivesAssignment_0; }
		
		//PredictiveVars
		public RuleCall getPredictivesPredictiveVarsParserRuleCall_0_0() { return cPredictivesPredictiveVarsParserRuleCall_0_0; }
		
		//targets=TargetVars
		public Assignment getTargetsAssignment_1() { return cTargetsAssignment_1; }
		
		//TargetVars
		public RuleCall getTargetsTargetVarsParserRuleCall_1_0() { return cTargetsTargetVarsParserRuleCall_1_0; }
	}
	public class PredictiveVarsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.PredictiveVars");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPredictive_varsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPredVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPredVarSTRINGTerminalRuleCall_2_0 = (RuleCall)cPredVarAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPredVarAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPredVarSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cPredVarAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PredictiveVars:
		//	'predictive_vars' ':' predVar+=STRING (',' predVar+=STRING)* ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'predictive_vars' ':' predVar+=STRING (',' predVar+=STRING)* ';'
		public Group getGroup() { return cGroup; }
		
		//'predictive_vars'
		public Keyword getPredictive_varsKeyword_0() { return cPredictive_varsKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//predVar+=STRING
		public Assignment getPredVarAssignment_2() { return cPredVarAssignment_2; }
		
		//STRING
		public RuleCall getPredVarSTRINGTerminalRuleCall_2_0() { return cPredVarSTRINGTerminalRuleCall_2_0; }
		
		//(',' predVar+=STRING)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//predVar+=STRING
		public Assignment getPredVarAssignment_3_1() { return cPredVarAssignment_3_1; }
		
		//STRING
		public RuleCall getPredVarSTRINGTerminalRuleCall_3_1_0() { return cPredVarSTRINGTerminalRuleCall_3_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class TargetVarsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.TargetVars");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTarget_varsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTargetVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTargetVarSTRINGTerminalRuleCall_2_0 = (RuleCall)cTargetVarAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTargetVarAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTargetVarSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cTargetVarAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TargetVars:
		//	'target_vars' ':' targetVar+=STRING (',' targetVar+=STRING)* ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'target_vars' ':' targetVar+=STRING (',' targetVar+=STRING)* ';'
		public Group getGroup() { return cGroup; }
		
		//'target_vars'
		public Keyword getTarget_varsKeyword_0() { return cTarget_varsKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//targetVar+=STRING
		public Assignment getTargetVarAssignment_2() { return cTargetVarAssignment_2; }
		
		//STRING
		public RuleCall getTargetVarSTRINGTerminalRuleCall_2_0() { return cTargetVarSTRINGTerminalRuleCall_2_0; }
		
		//(',' targetVar+=STRING)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//targetVar+=STRING
		public Assignment getTargetVarAssignment_3_1() { return cTargetVarAssignment_3_1; }
		
		//STRING
		public RuleCall getTargetVarSTRINGTerminalRuleCall_3_1_0() { return cTargetVarSTRINGTerminalRuleCall_3_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class EvaluationTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.EvaluationType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPartitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCrossValidationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EvaluationType:
		//	Partition | CrossValidation;
		@Override public ParserRule getRule() { return rule; }
		
		//Partition | CrossValidation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Partition
		public RuleCall getPartitionParserRuleCall_0() { return cPartitionParserRuleCall_0; }
		
		//CrossValidation
		public RuleCall getCrossValidationParserRuleCall_1() { return cCrossValidationParserRuleCall_1; }
	}
	public class PartitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.Partition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPartitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTestAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTestNumericValueParserRuleCall_2_0 = (RuleCall)cTestAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Partition:
		//	'partition' ':' test=NumericValue ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'partition' ':' test=NumericValue ';'
		public Group getGroup() { return cGroup; }
		
		//'partition'
		public Keyword getPartitionKeyword_0() { return cPartitionKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//test=NumericValue
		public Assignment getTestAssignment_2() { return cTestAssignment_2; }
		
		//NumericValue
		public RuleCall getTestNumericValueParserRuleCall_2_0() { return cTestNumericValueParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class CrossValidationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.CrossValidation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCross_validationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cKAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cKINTTerminalRuleCall_2_0 = (RuleCall)cKAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CrossValidation:
		//	'cross_validation' ':' k=INT ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'cross_validation' ':' k=INT ';'
		public Group getGroup() { return cGroup; }
		
		//'cross_validation'
		public Keyword getCross_validationKeyword_0() { return cCross_validationKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//k=INT
		public Assignment getKAssignment_2() { return cKAssignment_2; }
		
		//INT
		public RuleCall getKINTTerminalRuleCall_2_0() { return cKINTTerminalRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class AlgoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.Algo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAlgorithmKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAlgoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAlgoAlgoTypeParserRuleCall_2_0 = (RuleCall)cAlgoAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Algo:
		//	'algorithm' ':' algo=AlgoType ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'algorithm' ':' algo=AlgoType ';'
		public Group getGroup() { return cGroup; }
		
		//'algorithm'
		public Keyword getAlgorithmKeyword_0() { return cAlgorithmKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//algo=AlgoType
		public Assignment getAlgoAssignment_2() { return cAlgoAssignment_2; }
		
		//AlgoType
		public RuleCall getAlgoAlgoTypeParserRuleCall_2_0() { return cAlgoAlgoTypeParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class AlgoTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.AlgoType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLineRegressParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSVRParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDecisionTreeRegressorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AlgoType:
		//	LineRegress | SVR | DecisionTreeRegressor;
		@Override public ParserRule getRule() { return rule; }
		
		//LineRegress | SVR | DecisionTreeRegressor
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LineRegress
		public RuleCall getLineRegressParserRuleCall_0() { return cLineRegressParserRuleCall_0; }
		
		//SVR
		public RuleCall getSVRParserRuleCall_1() { return cSVRParserRuleCall_1; }
		
		//DecisionTreeRegressor
		public RuleCall getDecisionTreeRegressorParserRuleCall_2() { return cDecisionTreeRegressorParserRuleCall_2; }
	}
	public class LineRegressElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.LineRegress");
		private final Keyword cLine_regressKeyword = (Keyword)rule.eContents().get(1);
		
		//LineRegress:
		//	'line_regress';
		@Override public ParserRule getRule() { return rule; }
		
		//'line_regress'
		public Keyword getLine_regressKeyword() { return cLine_regressKeyword; }
	}
	public class DecisionTreeRegressorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.DecisionTreeRegressor");
		private final Keyword cDecision_tree_regressorKeyword = (Keyword)rule.eContents().get(1);
		
		//DecisionTreeRegressor:
		//	'decision_tree_regressor';
		@Override public ParserRule getRule() { return rule; }
		
		//'decision_tree_regressor'
		public Keyword getDecision_tree_regressorKeyword() { return cDecision_tree_regressorKeyword; }
	}
	public class SVRElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.SVR");
		private final Keyword cSvrKeyword = (Keyword)rule.eContents().get(1);
		
		//SVR:
		//	'svr';
		@Override public ParserRule getRule() { return rule; }
		
		//'svr'
		public Keyword getSvrKeyword() { return cSvrKeyword; }
	}
	public class CalculateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.Calculate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCalculateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCalculateTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCalculateTypeCalculateTypeParserRuleCall_2_0 = (RuleCall)cCalculateTypeAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Calculate:
		//	'calculate' ':' calculateType=CalculateType ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'calculate' ':' calculateType=CalculateType ';'
		public Group getGroup() { return cGroup; }
		
		//'calculate'
		public Keyword getCalculateKeyword_0() { return cCalculateKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//calculateType=CalculateType
		public Assignment getCalculateTypeAssignment_2() { return cCalculateTypeAssignment_2; }
		
		//CalculateType
		public RuleCall getCalculateTypeCalculateTypeParserRuleCall_2_0() { return cCalculateTypeCalculateTypeParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class CalculateTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.CalculateType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMeanAbsoluteErrorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMeanSquaredErrorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMedianAbsoluteErrorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//CalculateType:
		//	MeanAbsoluteError | MeanSquaredError | MedianAbsoluteError;
		@Override public ParserRule getRule() { return rule; }
		
		//MeanAbsoluteError | MeanSquaredError | MedianAbsoluteError
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MeanAbsoluteError
		public RuleCall getMeanAbsoluteErrorParserRuleCall_0() { return cMeanAbsoluteErrorParserRuleCall_0; }
		
		//MeanSquaredError
		public RuleCall getMeanSquaredErrorParserRuleCall_1() { return cMeanSquaredErrorParserRuleCall_1; }
		
		//MedianAbsoluteError
		public RuleCall getMedianAbsoluteErrorParserRuleCall_2() { return cMedianAbsoluteErrorParserRuleCall_2; }
	}
	public class MeanAbsoluteErrorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.MeanAbsoluteError");
		private final Keyword cMean_absolute_errorKeyword = (Keyword)rule.eContents().get(1);
		
		//MeanAbsoluteError:
		//	'mean_absolute_error';
		@Override public ParserRule getRule() { return rule; }
		
		//'mean_absolute_error'
		public Keyword getMean_absolute_errorKeyword() { return cMean_absolute_errorKeyword; }
	}
	public class MeanSquaredErrorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.MeanSquaredError");
		private final Keyword cMean_squared_errorKeyword = (Keyword)rule.eContents().get(1);
		
		//MeanSquaredError:
		//	'mean_squared_error';
		@Override public ParserRule getRule() { return rule; }
		
		//'mean_squared_error'
		public Keyword getMean_squared_errorKeyword() { return cMean_squared_errorKeyword; }
	}
	public class MedianAbsoluteErrorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.MedianAbsoluteError");
		private final Keyword cMedian_absolute_errorKeyword = (Keyword)rule.eContents().get(1);
		
		//MedianAbsoluteError:
		//	'median_absolute_error';
		@Override public ParserRule getRule() { return rule; }
		
		//'median_absolute_error'
		public Keyword getMedian_absolute_errorKeyword() { return cMedian_absolute_errorKeyword; }
	}
	public class LoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.Loop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLoopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIINTTerminalRuleCall_2_0 = (RuleCall)cIAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Loop:
		//	'loop' ':' i=INT ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'loop' ':' i=INT ';'
		public Group getGroup() { return cGroup; }
		
		//'loop'
		public Keyword getLoopKeyword_0() { return cLoopKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//i=INT
		public Assignment getIAssignment_2() { return cIAssignment_2; }
		
		//INT
		public RuleCall getIINTTerminalRuleCall_2_0() { return cIINTTerminalRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class NumericValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.NumericValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFLOATParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPERCENTParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NumericValue:
		//	FLOAT | PERCENT;
		@Override public ParserRule getRule() { return rule; }
		
		//FLOAT | PERCENT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FLOAT
		public RuleCall getFLOATParserRuleCall_0() { return cFLOATParserRuleCall_0; }
		
		//PERCENT
		public RuleCall getPERCENTParserRuleCall_1() { return cPERCENTParserRuleCall_1; }
	}
	public class FLOATElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.FLOAT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDecimalAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDecimalINTTerminalRuleCall_1_1_0 = (RuleCall)cDecimalAssignment_1_1.eContents().get(0);
		
		//FLOAT:
		//	value=INT ('.' decimal=INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT ('.' decimal=INT)?
		public Group getGroup() { return cGroup; }
		
		//value=INT
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_0() { return cValueINTTerminalRuleCall_0_0; }
		
		//('.' decimal=INT)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//decimal=INT
		public Assignment getDecimalAssignment_1_1() { return cDecimalAssignment_1_1; }
		
		//INT
		public RuleCall getDecimalINTTerminalRuleCall_1_1_0() { return cDecimalINTTerminalRuleCall_1_1_0; }
	}
	public class PERCENTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.PERCENT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFloatAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFloatFLOATParserRuleCall_0_0 = (RuleCall)cFloatAssignment_0.eContents().get(0);
		private final Keyword cPercentSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//PERCENT:
		//	float=FLOAT '%';
		@Override public ParserRule getRule() { return rule; }
		
		//float=FLOAT '%'
		public Group getGroup() { return cGroup; }
		
		//float=FLOAT
		public Assignment getFloatAssignment_0() { return cFloatAssignment_0; }
		
		//FLOAT
		public RuleCall getFloatFLOATParserRuleCall_0_0() { return cFloatFLOATParserRuleCall_0_0; }
		
		//'%'
		public Keyword getPercentSignKeyword_1() { return cPercentSignKeyword_1; }
	}
	
	
	private final ModelElements pModel;
	private final LanguageTargetElements pLanguageTarget;
	private final PythonElements pPython;
	private final RElements pR;
	private final MLRegressionElements pMLRegression;
	private final DatasetElements pDataset;
	private final VariablesElements pVariables;
	private final PredictiveVarsElements pPredictiveVars;
	private final TargetVarsElements pTargetVars;
	private final EvaluationTypeElements pEvaluationType;
	private final PartitionElements pPartition;
	private final CrossValidationElements pCrossValidation;
	private final AlgoElements pAlgo;
	private final AlgoTypeElements pAlgoType;
	private final LineRegressElements pLineRegress;
	private final DecisionTreeRegressorElements pDecisionTreeRegressor;
	private final SVRElements pSVR;
	private final CalculateElements pCalculate;
	private final CalculateTypeElements pCalculateType;
	private final MeanAbsoluteErrorElements pMeanAbsoluteError;
	private final MeanSquaredErrorElements pMeanSquaredError;
	private final MedianAbsoluteErrorElements pMedianAbsoluteError;
	private final LoopElements pLoop;
	private final NumericValueElements pNumericValue;
	private final FLOATElements pFLOAT;
	private final PERCENTElements pPERCENT;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MLRegressionGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pLanguageTarget = new LanguageTargetElements();
		this.pPython = new PythonElements();
		this.pR = new RElements();
		this.pMLRegression = new MLRegressionElements();
		this.pDataset = new DatasetElements();
		this.pVariables = new VariablesElements();
		this.pPredictiveVars = new PredictiveVarsElements();
		this.pTargetVars = new TargetVarsElements();
		this.pEvaluationType = new EvaluationTypeElements();
		this.pPartition = new PartitionElements();
		this.pCrossValidation = new CrossValidationElements();
		this.pAlgo = new AlgoElements();
		this.pAlgoType = new AlgoTypeElements();
		this.pLineRegress = new LineRegressElements();
		this.pDecisionTreeRegressor = new DecisionTreeRegressorElements();
		this.pSVR = new SVRElements();
		this.pCalculate = new CalculateElements();
		this.pCalculateType = new CalculateTypeElements();
		this.pMeanAbsoluteError = new MeanAbsoluteErrorElements();
		this.pMeanSquaredError = new MeanSquaredErrorElements();
		this.pMedianAbsoluteError = new MedianAbsoluteErrorElements();
		this.pLoop = new LoopElements();
		this.pNumericValue = new NumericValueElements();
		this.pFLOAT = new FLOATElements();
		this.pPERCENT = new PERCENTElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("m2.idm.project.MLRegression".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	languageTarget=LanguageTarget? ml=MLRegression;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//LanguageTarget:
	//	'target_language' ':' language=(Python | R) ";";
	public LanguageTargetElements getLanguageTargetAccess() {
		return pLanguageTarget;
	}
	
	public ParserRule getLanguageTargetRule() {
		return getLanguageTargetAccess().getRule();
	}
	
	//Python:
	//	'python' | 'Python' | 'PYTHON';
	public PythonElements getPythonAccess() {
		return pPython;
	}
	
	public ParserRule getPythonRule() {
		return getPythonAccess().getRule();
	}
	
	//R:
	//	'r' | 'R';
	public RElements getRAccess() {
		return pR;
	}
	
	public ParserRule getRRule() {
		return getRAccess().getRule();
	}
	
	//MLRegression:
	//	dataset=Dataset
	//	vars=Variables?
	//	evaluation=EvaluationType
	//	algo=Algo
	//	calculate=Calculate
	//	loop=Loop?;
	public MLRegressionElements getMLRegressionAccess() {
		return pMLRegression;
	}
	
	public ParserRule getMLRegressionRule() {
		return getMLRegressionAccess().getRule();
	}
	
	//Dataset:
	//	'import' dataPath=STRING separator=STRING? ';';
	public DatasetElements getDatasetAccess() {
		return pDataset;
	}
	
	public ParserRule getDatasetRule() {
		return getDatasetAccess().getRule();
	}
	
	//Variables:
	//	predictives=PredictiveVars targets=TargetVars;
	public VariablesElements getVariablesAccess() {
		return pVariables;
	}
	
	public ParserRule getVariablesRule() {
		return getVariablesAccess().getRule();
	}
	
	//PredictiveVars:
	//	'predictive_vars' ':' predVar+=STRING (',' predVar+=STRING)* ';';
	public PredictiveVarsElements getPredictiveVarsAccess() {
		return pPredictiveVars;
	}
	
	public ParserRule getPredictiveVarsRule() {
		return getPredictiveVarsAccess().getRule();
	}
	
	//TargetVars:
	//	'target_vars' ':' targetVar+=STRING (',' targetVar+=STRING)* ';';
	public TargetVarsElements getTargetVarsAccess() {
		return pTargetVars;
	}
	
	public ParserRule getTargetVarsRule() {
		return getTargetVarsAccess().getRule();
	}
	
	//EvaluationType:
	//	Partition | CrossValidation;
	public EvaluationTypeElements getEvaluationTypeAccess() {
		return pEvaluationType;
	}
	
	public ParserRule getEvaluationTypeRule() {
		return getEvaluationTypeAccess().getRule();
	}
	
	//Partition:
	//	'partition' ':' test=NumericValue ';';
	public PartitionElements getPartitionAccess() {
		return pPartition;
	}
	
	public ParserRule getPartitionRule() {
		return getPartitionAccess().getRule();
	}
	
	//CrossValidation:
	//	'cross_validation' ':' k=INT ';';
	public CrossValidationElements getCrossValidationAccess() {
		return pCrossValidation;
	}
	
	public ParserRule getCrossValidationRule() {
		return getCrossValidationAccess().getRule();
	}
	
	//Algo:
	//	'algorithm' ':' algo=AlgoType ';';
	public AlgoElements getAlgoAccess() {
		return pAlgo;
	}
	
	public ParserRule getAlgoRule() {
		return getAlgoAccess().getRule();
	}
	
	//AlgoType:
	//	LineRegress | SVR | DecisionTreeRegressor;
	public AlgoTypeElements getAlgoTypeAccess() {
		return pAlgoType;
	}
	
	public ParserRule getAlgoTypeRule() {
		return getAlgoTypeAccess().getRule();
	}
	
	//LineRegress:
	//	'line_regress';
	public LineRegressElements getLineRegressAccess() {
		return pLineRegress;
	}
	
	public ParserRule getLineRegressRule() {
		return getLineRegressAccess().getRule();
	}
	
	//DecisionTreeRegressor:
	//	'decision_tree_regressor';
	public DecisionTreeRegressorElements getDecisionTreeRegressorAccess() {
		return pDecisionTreeRegressor;
	}
	
	public ParserRule getDecisionTreeRegressorRule() {
		return getDecisionTreeRegressorAccess().getRule();
	}
	
	//SVR:
	//	'svr';
	public SVRElements getSVRAccess() {
		return pSVR;
	}
	
	public ParserRule getSVRRule() {
		return getSVRAccess().getRule();
	}
	
	//Calculate:
	//	'calculate' ':' calculateType=CalculateType ';';
	public CalculateElements getCalculateAccess() {
		return pCalculate;
	}
	
	public ParserRule getCalculateRule() {
		return getCalculateAccess().getRule();
	}
	
	//CalculateType:
	//	MeanAbsoluteError | MeanSquaredError | MedianAbsoluteError;
	public CalculateTypeElements getCalculateTypeAccess() {
		return pCalculateType;
	}
	
	public ParserRule getCalculateTypeRule() {
		return getCalculateTypeAccess().getRule();
	}
	
	//MeanAbsoluteError:
	//	'mean_absolute_error';
	public MeanAbsoluteErrorElements getMeanAbsoluteErrorAccess() {
		return pMeanAbsoluteError;
	}
	
	public ParserRule getMeanAbsoluteErrorRule() {
		return getMeanAbsoluteErrorAccess().getRule();
	}
	
	//MeanSquaredError:
	//	'mean_squared_error';
	public MeanSquaredErrorElements getMeanSquaredErrorAccess() {
		return pMeanSquaredError;
	}
	
	public ParserRule getMeanSquaredErrorRule() {
		return getMeanSquaredErrorAccess().getRule();
	}
	
	//MedianAbsoluteError:
	//	'median_absolute_error';
	public MedianAbsoluteErrorElements getMedianAbsoluteErrorAccess() {
		return pMedianAbsoluteError;
	}
	
	public ParserRule getMedianAbsoluteErrorRule() {
		return getMedianAbsoluteErrorAccess().getRule();
	}
	
	//Loop:
	//	'loop' ':' i=INT ';';
	public LoopElements getLoopAccess() {
		return pLoop;
	}
	
	public ParserRule getLoopRule() {
		return getLoopAccess().getRule();
	}
	
	//NumericValue:
	//	FLOAT | PERCENT;
	public NumericValueElements getNumericValueAccess() {
		return pNumericValue;
	}
	
	public ParserRule getNumericValueRule() {
		return getNumericValueAccess().getRule();
	}
	
	//FLOAT:
	//	value=INT ('.' decimal=INT)?;
	public FLOATElements getFLOATAccess() {
		return pFLOAT;
	}
	
	public ParserRule getFLOATRule() {
		return getFLOATAccess().getRule();
	}
	
	//PERCENT:
	//	float=FLOAT '%';
	public PERCENTElements getPERCENTAccess() {
		return pPERCENT;
	}
	
	public ParserRule getPERCENTRule() {
		return getPERCENTAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
