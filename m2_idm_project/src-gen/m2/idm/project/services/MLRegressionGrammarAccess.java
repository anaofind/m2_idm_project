/*
 * generated by Xtext 2.23.0
 */
package m2.idm.project.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MLRegressionGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class MLRegressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.MLRegression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDatasetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDatasetDatasetParserRuleCall_0_0 = (RuleCall)cDatasetAssignment_0.eContents().get(0);
		private final Assignment cLearningTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLearningTypeLearningTypeParserRuleCall_1_0 = (RuleCall)cLearningTypeAssignment_1.eContents().get(0);
		private final Assignment cVarsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarsVariablesParserRuleCall_2_0 = (RuleCall)cVarsAssignment_2.eContents().get(0);
		private final Assignment cReturnTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cReturnTypeReturnTypeParserRuleCall_3_0 = (RuleCall)cReturnTypeAssignment_3.eContents().get(0);
		
		//MLRegression:
		//	dataset=Dataset
		//	learningType=LearningType?
		//	vars=Variables
		//	returnType=ReturnType?;
		@Override public ParserRule getRule() { return rule; }
		
		//dataset=Dataset learningType=LearningType? vars=Variables returnType=ReturnType?
		public Group getGroup() { return cGroup; }
		
		//dataset=Dataset
		public Assignment getDatasetAssignment_0() { return cDatasetAssignment_0; }
		
		//Dataset
		public RuleCall getDatasetDatasetParserRuleCall_0_0() { return cDatasetDatasetParserRuleCall_0_0; }
		
		//learningType=LearningType?
		public Assignment getLearningTypeAssignment_1() { return cLearningTypeAssignment_1; }
		
		//LearningType
		public RuleCall getLearningTypeLearningTypeParserRuleCall_1_0() { return cLearningTypeLearningTypeParserRuleCall_1_0; }
		
		//vars=Variables
		public Assignment getVarsAssignment_2() { return cVarsAssignment_2; }
		
		//Variables
		public RuleCall getVarsVariablesParserRuleCall_2_0() { return cVarsVariablesParserRuleCall_2_0; }
		
		//returnType=ReturnType?
		public Assignment getReturnTypeAssignment_3() { return cReturnTypeAssignment_3; }
		
		//ReturnType
		public RuleCall getReturnTypeReturnTypeParserRuleCall_3_0() { return cReturnTypeReturnTypeParserRuleCall_3_0; }
	}
	public class DatasetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.Dataset");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDatasetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cDatasetImportKeyword_0_0 = (Keyword)cDatasetAssignment_0.eContents().get(0);
		private final Assignment cDataAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDataStringValueParserRuleCall_1_0 = (RuleCall)cDataAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Dataset:
		//	dataset='import' data=StringValue ';';
		@Override public ParserRule getRule() { return rule; }
		
		//dataset='import' data=StringValue ';'
		public Group getGroup() { return cGroup; }
		
		//dataset='import'
		public Assignment getDatasetAssignment_0() { return cDatasetAssignment_0; }
		
		//'import'
		public Keyword getDatasetImportKeyword_0_0() { return cDatasetImportKeyword_0_0; }
		
		//data=StringValue
		public Assignment getDataAssignment_1() { return cDataAssignment_1; }
		
		//StringValue
		public RuleCall getDataStringValueParserRuleCall_1_0() { return cDataStringValueParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class LearningTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.LearningType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLearningKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cTrainingAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cTrainingTrainingParserRuleCall_1_0_0 = (RuleCall)cTrainingAssignment_1_0.eContents().get(0);
		private final Assignment cCrossValidationAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cCrossValidationCrossValidationParserRuleCall_1_1_0 = (RuleCall)cCrossValidationAssignment_1_1.eContents().get(0);
		
		//LearningType:
		//	'learning' (training=Training | crossValidation=CrossValidation);
		@Override public ParserRule getRule() { return rule; }
		
		//'learning' (training=Training | crossValidation=CrossValidation)
		public Group getGroup() { return cGroup; }
		
		//'learning'
		public Keyword getLearningKeyword_0() { return cLearningKeyword_0; }
		
		//(training=Training | crossValidation=CrossValidation)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//training=Training
		public Assignment getTrainingAssignment_1_0() { return cTrainingAssignment_1_0; }
		
		//Training
		public RuleCall getTrainingTrainingParserRuleCall_1_0_0() { return cTrainingTrainingParserRuleCall_1_0_0; }
		
		//crossValidation=CrossValidation
		public Assignment getCrossValidationAssignment_1_1() { return cCrossValidationAssignment_1_1; }
		
		//CrossValidation
		public RuleCall getCrossValidationCrossValidationParserRuleCall_1_1_0() { return cCrossValidationCrossValidationParserRuleCall_1_1_0; }
	}
	public class TrainingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.Training");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTrainingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTrainingAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cTrainingAlternatives_1_0 = (Alternatives)cTrainingAssignment_1.eContents().get(0);
		private final RuleCall cTrainingNumberValueParserRuleCall_1_0_0 = (RuleCall)cTrainingAlternatives_1_0.eContents().get(0);
		private final RuleCall cTrainingPercentValueParserRuleCall_1_0_1 = (RuleCall)cTrainingAlternatives_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Training:
		//	'training' training=(NumberValue | PercentValue) ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'training' training=(NumberValue | PercentValue) ';'
		public Group getGroup() { return cGroup; }
		
		//'training'
		public Keyword getTrainingKeyword_0() { return cTrainingKeyword_0; }
		
		//training=(NumberValue | PercentValue)
		public Assignment getTrainingAssignment_1() { return cTrainingAssignment_1; }
		
		//(NumberValue | PercentValue)
		public Alternatives getTrainingAlternatives_1_0() { return cTrainingAlternatives_1_0; }
		
		//NumberValue
		public RuleCall getTrainingNumberValueParserRuleCall_1_0_0() { return cTrainingNumberValueParserRuleCall_1_0_0; }
		
		//PercentValue
		public RuleCall getTrainingPercentValueParserRuleCall_1_0_1() { return cTrainingPercentValueParserRuleCall_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class CrossValidationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.CrossValidation");
		private final Keyword cCross_validationKeyword = (Keyword)rule.eContents().get(1);
		
		//CrossValidation:
		//	'cross_validation';
		@Override public ParserRule getRule() { return rule; }
		
		//'cross_validation'
		public Keyword getCross_validationKeyword() { return cCross_validationKeyword; }
	}
	public class VariablesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.Variables");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPredictivesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPredictivesPredictivesParserRuleCall_0_0 = (RuleCall)cPredictivesAssignment_0.eContents().get(0);
		private final Assignment cTargetsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTargetsTargetsParserRuleCall_1_0 = (RuleCall)cTargetsAssignment_1.eContents().get(0);
		
		//Variables:
		//	predictives=Predictives targets=Targets;
		@Override public ParserRule getRule() { return rule; }
		
		//predictives=Predictives targets=Targets
		public Group getGroup() { return cGroup; }
		
		//predictives=Predictives
		public Assignment getPredictivesAssignment_0() { return cPredictivesAssignment_0; }
		
		//Predictives
		public RuleCall getPredictivesPredictivesParserRuleCall_0_0() { return cPredictivesPredictivesParserRuleCall_0_0; }
		
		//targets=Targets
		public Assignment getTargetsAssignment_1() { return cTargetsAssignment_1; }
		
		//Targets
		public RuleCall getTargetsTargetsParserRuleCall_1_0() { return cTargetsTargetsParserRuleCall_1_0; }
	}
	public class PredictivesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.Predictives");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPredictKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVarsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarsVarParserRuleCall_2_0 = (RuleCall)cVarsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Predictives:
		//	'predict' '{' vars+=Var+ '}' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'predict' '{' vars+=Var+ '}' ';'
		public Group getGroup() { return cGroup; }
		
		//'predict'
		public Keyword getPredictKeyword_0() { return cPredictKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//vars+=Var+
		public Assignment getVarsAssignment_2() { return cVarsAssignment_2; }
		
		//Var
		public RuleCall getVarsVarParserRuleCall_2_0() { return cVarsVarParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class TargetsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.Targets");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTargetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarVarParserRuleCall_1_0 = (RuleCall)cVarAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Targets:
		//	'target' var=Var ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'target' var=Var ';'
		public Group getGroup() { return cGroup; }
		
		//'target'
		public Keyword getTargetKeyword_0() { return cTargetKeyword_0; }
		
		//var=Var
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }
		
		//Var
		public RuleCall getVarVarParserRuleCall_1_0() { return cVarVarParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class VarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.Var");
		private final Assignment cNameVarAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameVarStringValueParserRuleCall_0 = (RuleCall)cNameVarAssignment.eContents().get(0);
		
		//Var:
		//	nameVar=StringValue;
		@Override public ParserRule getRule() { return rule; }
		
		//nameVar=StringValue
		public Assignment getNameVarAssignment() { return cNameVarAssignment; }
		
		//StringValue
		public RuleCall getNameVarStringValueParserRuleCall_0() { return cNameVarStringValueParserRuleCall_0; }
	}
	public class ReturnTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.ReturnType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameReturnAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameReturnStringValueParserRuleCall_1_0 = (RuleCall)cNameReturnAssignment_1.eContents().get(0);
		
		//ReturnType:
		//	'return' nameReturn=StringValue;
		@Override public ParserRule getRule() { return rule; }
		
		//'return' nameReturn=StringValue
		public Group getGroup() { return cGroup; }
		
		//'return'
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }
		
		//nameReturn=StringValue
		public Assignment getNameReturnAssignment_1() { return cNameReturnAssignment_1; }
		
		//StringValue
		public RuleCall getNameReturnStringValueParserRuleCall_1_0() { return cNameReturnStringValueParserRuleCall_1_0; }
	}
	public class TypeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.TypeValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumberValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPercentValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBooleanValueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//TypeValue:
		//	StringValue | NumberValue | PercentValue | BooleanValue;
		@Override public ParserRule getRule() { return rule; }
		
		//StringValue | NumberValue | PercentValue | BooleanValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StringValue
		public RuleCall getStringValueParserRuleCall_0() { return cStringValueParserRuleCall_0; }
		
		//NumberValue
		public RuleCall getNumberValueParserRuleCall_1() { return cNumberValueParserRuleCall_1; }
		
		//PercentValue
		public RuleCall getPercentValueParserRuleCall_2() { return cPercentValueParserRuleCall_2; }
		
		//BooleanValue
		public RuleCall getBooleanValueParserRuleCall_3() { return cBooleanValueParserRuleCall_3; }
	}
	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.StringValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringValue:
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class NumberValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.NumberValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDecimalAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDecimalINTTerminalRuleCall_1_1_0 = (RuleCall)cDecimalAssignment_1_1.eContents().get(0);
		
		//NumberValue:
		//	value=INT ('.' decimal+=INT*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT ('.' decimal+=INT*)?
		public Group getGroup() { return cGroup; }
		
		//value=INT
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_0() { return cValueINTTerminalRuleCall_0_0; }
		
		//('.' decimal+=INT*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//decimal+=INT*
		public Assignment getDecimalAssignment_1_1() { return cDecimalAssignment_1_1; }
		
		//INT
		public RuleCall getDecimalINTTerminalRuleCall_1_1_0() { return cDecimalINTTerminalRuleCall_1_1_0; }
	}
	public class PercentValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.PercentValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNumberValueParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cPercentSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//PercentValue:
		//	NumberValue '%';
		@Override public ParserRule getRule() { return rule; }
		
		//NumberValue '%'
		public Group getGroup() { return cGroup; }
		
		//NumberValue
		public RuleCall getNumberValueParserRuleCall_0() { return cNumberValueParserRuleCall_0; }
		
		//'%'
		public Keyword getPercentSignKeyword_1() { return cPercentSignKeyword_1; }
	}
	public class BooleanValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2.idm.project.MLRegression.BooleanValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final Keyword cValueFalseKeyword_0_0 = (Keyword)cValueAlternatives_0.eContents().get(0);
		private final Keyword cValueTrueKeyword_0_1 = (Keyword)cValueAlternatives_0.eContents().get(1);
		
		//BooleanValue:
		//	value=('false' | 'true');
		@Override public ParserRule getRule() { return rule; }
		
		//value=('false' | 'true')
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//('false' | 'true')
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }
		
		//'false'
		public Keyword getValueFalseKeyword_0_0() { return cValueFalseKeyword_0_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_0_1() { return cValueTrueKeyword_0_1; }
	}
	
	
	private final MLRegressionElements pMLRegression;
	private final DatasetElements pDataset;
	private final LearningTypeElements pLearningType;
	private final TrainingElements pTraining;
	private final CrossValidationElements pCrossValidation;
	private final VariablesElements pVariables;
	private final PredictivesElements pPredictives;
	private final TargetsElements pTargets;
	private final VarElements pVar;
	private final ReturnTypeElements pReturnType;
	private final TypeValueElements pTypeValue;
	private final StringValueElements pStringValue;
	private final NumberValueElements pNumberValue;
	private final PercentValueElements pPercentValue;
	private final BooleanValueElements pBooleanValue;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MLRegressionGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMLRegression = new MLRegressionElements();
		this.pDataset = new DatasetElements();
		this.pLearningType = new LearningTypeElements();
		this.pTraining = new TrainingElements();
		this.pCrossValidation = new CrossValidationElements();
		this.pVariables = new VariablesElements();
		this.pPredictives = new PredictivesElements();
		this.pTargets = new TargetsElements();
		this.pVar = new VarElements();
		this.pReturnType = new ReturnTypeElements();
		this.pTypeValue = new TypeValueElements();
		this.pStringValue = new StringValueElements();
		this.pNumberValue = new NumberValueElements();
		this.pPercentValue = new PercentValueElements();
		this.pBooleanValue = new BooleanValueElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("m2.idm.project.MLRegression".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//MLRegression:
	//	dataset=Dataset
	//	learningType=LearningType?
	//	vars=Variables
	//	returnType=ReturnType?;
	public MLRegressionElements getMLRegressionAccess() {
		return pMLRegression;
	}
	
	public ParserRule getMLRegressionRule() {
		return getMLRegressionAccess().getRule();
	}
	
	//Dataset:
	//	dataset='import' data=StringValue ';';
	public DatasetElements getDatasetAccess() {
		return pDataset;
	}
	
	public ParserRule getDatasetRule() {
		return getDatasetAccess().getRule();
	}
	
	//LearningType:
	//	'learning' (training=Training | crossValidation=CrossValidation);
	public LearningTypeElements getLearningTypeAccess() {
		return pLearningType;
	}
	
	public ParserRule getLearningTypeRule() {
		return getLearningTypeAccess().getRule();
	}
	
	//Training:
	//	'training' training=(NumberValue | PercentValue) ';';
	public TrainingElements getTrainingAccess() {
		return pTraining;
	}
	
	public ParserRule getTrainingRule() {
		return getTrainingAccess().getRule();
	}
	
	//CrossValidation:
	//	'cross_validation';
	public CrossValidationElements getCrossValidationAccess() {
		return pCrossValidation;
	}
	
	public ParserRule getCrossValidationRule() {
		return getCrossValidationAccess().getRule();
	}
	
	//Variables:
	//	predictives=Predictives targets=Targets;
	public VariablesElements getVariablesAccess() {
		return pVariables;
	}
	
	public ParserRule getVariablesRule() {
		return getVariablesAccess().getRule();
	}
	
	//Predictives:
	//	'predict' '{' vars+=Var+ '}' ';';
	public PredictivesElements getPredictivesAccess() {
		return pPredictives;
	}
	
	public ParserRule getPredictivesRule() {
		return getPredictivesAccess().getRule();
	}
	
	//Targets:
	//	'target' var=Var ';';
	public TargetsElements getTargetsAccess() {
		return pTargets;
	}
	
	public ParserRule getTargetsRule() {
		return getTargetsAccess().getRule();
	}
	
	//Var:
	//	nameVar=StringValue;
	public VarElements getVarAccess() {
		return pVar;
	}
	
	public ParserRule getVarRule() {
		return getVarAccess().getRule();
	}
	
	//ReturnType:
	//	'return' nameReturn=StringValue;
	public ReturnTypeElements getReturnTypeAccess() {
		return pReturnType;
	}
	
	public ParserRule getReturnTypeRule() {
		return getReturnTypeAccess().getRule();
	}
	
	//TypeValue:
	//	StringValue | NumberValue | PercentValue | BooleanValue;
	public TypeValueElements getTypeValueAccess() {
		return pTypeValue;
	}
	
	public ParserRule getTypeValueRule() {
		return getTypeValueAccess().getRule();
	}
	
	//StringValue:
	//	value=STRING;
	public StringValueElements getStringValueAccess() {
		return pStringValue;
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}
	
	//NumberValue:
	//	value=INT ('.' decimal+=INT*)?;
	public NumberValueElements getNumberValueAccess() {
		return pNumberValue;
	}
	
	public ParserRule getNumberValueRule() {
		return getNumberValueAccess().getRule();
	}
	
	//PercentValue:
	//	NumberValue '%';
	public PercentValueElements getPercentValueAccess() {
		return pPercentValue;
	}
	
	public ParserRule getPercentValueRule() {
		return getPercentValueAccess().getRule();
	}
	
	//BooleanValue:
	//	value=('false' | 'true');
	public BooleanValueElements getBooleanValueAccess() {
		return pBooleanValue;
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
