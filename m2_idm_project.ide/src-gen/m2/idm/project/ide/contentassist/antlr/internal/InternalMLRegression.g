/*
 * generated by Xtext 2.23.0
 */
grammar InternalMLRegression;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package m2.idm.project.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package m2.idm.project.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import m2.idm.project.services.MLRegressionGrammarAccess;

}
@parser::members {
	private MLRegressionGrammarAccess grammarAccess;

	public void setGrammarAccess(MLRegressionGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGroup()); }
		(rule__Model__Group__0)
		{ after(grammarAccess.getModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLanguageTarget
entryRuleLanguageTarget
:
{ before(grammarAccess.getLanguageTargetRule()); }
	 ruleLanguageTarget
{ after(grammarAccess.getLanguageTargetRule()); } 
	 EOF 
;

// Rule LanguageTarget
ruleLanguageTarget 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLanguageTargetAccess().getGroup()); }
		(rule__LanguageTarget__Group__0)
		{ after(grammarAccess.getLanguageTargetAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePython
entryRulePython
:
{ before(grammarAccess.getPythonRule()); }
	 rulePython
{ after(grammarAccess.getPythonRule()); } 
	 EOF 
;

// Rule Python
rulePython 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPythonAccess().getAlternatives()); }
		(rule__Python__Alternatives)
		{ after(grammarAccess.getPythonAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleR
entryRuleR
:
{ before(grammarAccess.getRRule()); }
	 ruleR
{ after(grammarAccess.getRRule()); } 
	 EOF 
;

// Rule R
ruleR 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRAccess().getAlternatives()); }
		(rule__R__Alternatives)
		{ after(grammarAccess.getRAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMLRegression
entryRuleMLRegression
:
{ before(grammarAccess.getMLRegressionRule()); }
	 ruleMLRegression
{ after(grammarAccess.getMLRegressionRule()); } 
	 EOF 
;

// Rule MLRegression
ruleMLRegression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMLRegressionAccess().getGroup()); }
		(rule__MLRegression__Group__0)
		{ after(grammarAccess.getMLRegressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDataset
entryRuleDataset
:
{ before(grammarAccess.getDatasetRule()); }
	 ruleDataset
{ after(grammarAccess.getDatasetRule()); } 
	 EOF 
;

// Rule Dataset
ruleDataset 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDatasetAccess().getGroup()); }
		(rule__Dataset__Group__0)
		{ after(grammarAccess.getDatasetAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEvaluationType
entryRuleEvaluationType
:
{ before(grammarAccess.getEvaluationTypeRule()); }
	 ruleEvaluationType
{ after(grammarAccess.getEvaluationTypeRule()); } 
	 EOF 
;

// Rule EvaluationType
ruleEvaluationType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEvaluationTypeAccess().getAlternatives()); }
		(rule__EvaluationType__Alternatives)
		{ after(grammarAccess.getEvaluationTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePartition
entryRulePartition
:
{ before(grammarAccess.getPartitionRule()); }
	 rulePartition
{ after(grammarAccess.getPartitionRule()); } 
	 EOF 
;

// Rule Partition
rulePartition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPartitionAccess().getGroup()); }
		(rule__Partition__Group__0)
		{ after(grammarAccess.getPartitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCrossValidation
entryRuleCrossValidation
:
{ before(grammarAccess.getCrossValidationRule()); }
	 ruleCrossValidation
{ after(grammarAccess.getCrossValidationRule()); } 
	 EOF 
;

// Rule CrossValidation
ruleCrossValidation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCrossValidationAccess().getGroup()); }
		(rule__CrossValidation__Group__0)
		{ after(grammarAccess.getCrossValidationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariables
entryRuleVariables
:
{ before(grammarAccess.getVariablesRule()); }
	 ruleVariables
{ after(grammarAccess.getVariablesRule()); } 
	 EOF 
;

// Rule Variables
ruleVariables 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariablesAccess().getGroup()); }
		(rule__Variables__Group__0)
		{ after(grammarAccess.getVariablesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleListePredictiveVar
entryRuleListePredictiveVar
:
{ before(grammarAccess.getListePredictiveVarRule()); }
	 ruleListePredictiveVar
{ after(grammarAccess.getListePredictiveVarRule()); } 
	 EOF 
;

// Rule ListePredictiveVar
ruleListePredictiveVar 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getListePredictiveVarAccess().getGroup()); }
		(rule__ListePredictiveVar__Group__0)
		{ after(grammarAccess.getListePredictiveVarAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTargetVar
entryRuleTargetVar
:
{ before(grammarAccess.getTargetVarRule()); }
	 ruleTargetVar
{ after(grammarAccess.getTargetVarRule()); } 
	 EOF 
;

// Rule TargetVar
ruleTargetVar 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTargetVarAccess().getGroup()); }
		(rule__TargetVar__Group__0)
		{ after(grammarAccess.getTargetVarAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCalculate
entryRuleCalculate
:
{ before(grammarAccess.getCalculateRule()); }
	 ruleCalculate
{ after(grammarAccess.getCalculateRule()); } 
	 EOF 
;

// Rule Calculate
ruleCalculate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCalculateAccess().getGroup()); }
		(rule__Calculate__Group__0)
		{ after(grammarAccess.getCalculateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCalculateType
entryRuleCalculateType
:
{ before(grammarAccess.getCalculateTypeRule()); }
	 ruleCalculateType
{ after(grammarAccess.getCalculateTypeRule()); } 
	 EOF 
;

// Rule CalculateType
ruleCalculateType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCalculateTypeAccess().getAlternatives()); }
		(rule__CalculateType__Alternatives)
		{ after(grammarAccess.getCalculateTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAlgo
entryRuleAlgo
:
{ before(grammarAccess.getAlgoRule()); }
	 ruleAlgo
{ after(grammarAccess.getAlgoRule()); } 
	 EOF 
;

// Rule Algo
ruleAlgo 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAlgoAccess().getGroup()); }
		(rule__Algo__Group__0)
		{ after(grammarAccess.getAlgoAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAlgoType
entryRuleAlgoType
:
{ before(grammarAccess.getAlgoTypeRule()); }
	 ruleAlgoType
{ after(grammarAccess.getAlgoTypeRule()); } 
	 EOF 
;

// Rule AlgoType
ruleAlgoType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAlgoTypeAccess().getAlternatives()); }
		(rule__AlgoType__Alternatives)
		{ after(grammarAccess.getAlgoTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLineRegress
entryRuleLineRegress
:
{ before(grammarAccess.getLineRegressRule()); }
	 ruleLineRegress
{ after(grammarAccess.getLineRegressRule()); } 
	 EOF 
;

// Rule LineRegress
ruleLineRegress 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLineRegressAccess().getLine_regressKeyword()); }
		'line_regress'
		{ after(grammarAccess.getLineRegressAccess().getLine_regressKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDecisionTreeRegressor
entryRuleDecisionTreeRegressor
:
{ before(grammarAccess.getDecisionTreeRegressorRule()); }
	 ruleDecisionTreeRegressor
{ after(grammarAccess.getDecisionTreeRegressorRule()); } 
	 EOF 
;

// Rule DecisionTreeRegressor
ruleDecisionTreeRegressor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDecisionTreeRegressorAccess().getDecision_tree_regressorKeyword()); }
		'decision_tree_regressor'
		{ after(grammarAccess.getDecisionTreeRegressorAccess().getDecision_tree_regressorKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSVR
entryRuleSVR
:
{ before(grammarAccess.getSVRRule()); }
	 ruleSVR
{ after(grammarAccess.getSVRRule()); } 
	 EOF 
;

// Rule SVR
ruleSVR 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSVRAccess().getSvrKeyword()); }
		'svr'
		{ after(grammarAccess.getSVRAccess().getSvrKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMeanAbsoluteError
entryRuleMeanAbsoluteError
:
{ before(grammarAccess.getMeanAbsoluteErrorRule()); }
	 ruleMeanAbsoluteError
{ after(grammarAccess.getMeanAbsoluteErrorRule()); } 
	 EOF 
;

// Rule MeanAbsoluteError
ruleMeanAbsoluteError 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMeanAbsoluteErrorAccess().getMean_absolute_errorKeyword()); }
		'mean_absolute_error'
		{ after(grammarAccess.getMeanAbsoluteErrorAccess().getMean_absolute_errorKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMeanSquaredError
entryRuleMeanSquaredError
:
{ before(grammarAccess.getMeanSquaredErrorRule()); }
	 ruleMeanSquaredError
{ after(grammarAccess.getMeanSquaredErrorRule()); } 
	 EOF 
;

// Rule MeanSquaredError
ruleMeanSquaredError 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMeanSquaredErrorAccess().getMean_squared_errorKeyword()); }
		'mean_squared_error'
		{ after(grammarAccess.getMeanSquaredErrorAccess().getMean_squared_errorKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMedianAbsoluteError
entryRuleMedianAbsoluteError
:
{ before(grammarAccess.getMedianAbsoluteErrorRule()); }
	 ruleMedianAbsoluteError
{ after(grammarAccess.getMedianAbsoluteErrorRule()); } 
	 EOF 
;

// Rule MedianAbsoluteError
ruleMedianAbsoluteError 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMedianAbsoluteErrorAccess().getMedian_absolute_errorKeyword()); }
		'median_absolute_error'
		{ after(grammarAccess.getMedianAbsoluteErrorAccess().getMedian_absolute_errorKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumericValue
entryRuleNumericValue
:
{ before(grammarAccess.getNumericValueRule()); }
	 ruleNumericValue
{ after(grammarAccess.getNumericValueRule()); } 
	 EOF 
;

// Rule NumericValue
ruleNumericValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumericValueAccess().getAlternatives()); }
		(rule__NumericValue__Alternatives)
		{ after(grammarAccess.getNumericValueAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFLOAT
entryRuleFLOAT
:
{ before(grammarAccess.getFLOATRule()); }
	 ruleFLOAT
{ after(grammarAccess.getFLOATRule()); } 
	 EOF 
;

// Rule FLOAT
ruleFLOAT 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFLOATAccess().getGroup()); }
		(rule__FLOAT__Group__0)
		{ after(grammarAccess.getFLOATAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePERCENT
entryRulePERCENT
:
{ before(grammarAccess.getPERCENTRule()); }
	 rulePERCENT
{ after(grammarAccess.getPERCENTRule()); } 
	 EOF 
;

// Rule PERCENT
rulePERCENT 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPERCENTAccess().getGroup()); }
		(rule__PERCENT__Group__0)
		{ after(grammarAccess.getPERCENTAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageTarget__LanguageAlternatives_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLanguageTargetAccess().getLanguagePythonParserRuleCall_2_0_0()); }
		rulePython
		{ after(grammarAccess.getLanguageTargetAccess().getLanguagePythonParserRuleCall_2_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getLanguageTargetAccess().getLanguageRParserRuleCall_2_0_1()); }
		ruleR
		{ after(grammarAccess.getLanguageTargetAccess().getLanguageRParserRuleCall_2_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Python__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPythonAccess().getPythonKeyword_0()); }
		'python'
		{ after(grammarAccess.getPythonAccess().getPythonKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getPythonAccess().getPythonKeyword_1()); }
		'Python'
		{ after(grammarAccess.getPythonAccess().getPythonKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getPythonAccess().getPYTHONKeyword_2()); }
		'PYTHON'
		{ after(grammarAccess.getPythonAccess().getPYTHONKeyword_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__R__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRAccess().getRKeyword_0()); }
		'r'
		{ after(grammarAccess.getRAccess().getRKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getRAccess().getRKeyword_1()); }
		'R'
		{ after(grammarAccess.getRAccess().getRKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EvaluationType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEvaluationTypeAccess().getPartitionParserRuleCall_0()); }
		rulePartition
		{ after(grammarAccess.getEvaluationTypeAccess().getPartitionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEvaluationTypeAccess().getCrossValidationParserRuleCall_1()); }
		ruleCrossValidation
		{ after(grammarAccess.getEvaluationTypeAccess().getCrossValidationParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CalculateType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCalculateTypeAccess().getMeanAbsoluteErrorParserRuleCall_0()); }
		ruleMeanAbsoluteError
		{ after(grammarAccess.getCalculateTypeAccess().getMeanAbsoluteErrorParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getCalculateTypeAccess().getMeanSquaredErrorParserRuleCall_1()); }
		ruleMeanSquaredError
		{ after(grammarAccess.getCalculateTypeAccess().getMeanSquaredErrorParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getCalculateTypeAccess().getMedianAbsoluteErrorParserRuleCall_2()); }
		ruleMedianAbsoluteError
		{ after(grammarAccess.getCalculateTypeAccess().getMedianAbsoluteErrorParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AlgoType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAlgoTypeAccess().getLineRegressParserRuleCall_0()); }
		ruleLineRegress
		{ after(grammarAccess.getAlgoTypeAccess().getLineRegressParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getAlgoTypeAccess().getSVRParserRuleCall_1()); }
		ruleSVR
		{ after(grammarAccess.getAlgoTypeAccess().getSVRParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getAlgoTypeAccess().getDecisionTreeRegressorParserRuleCall_2()); }
		ruleDecisionTreeRegressor
		{ after(grammarAccess.getAlgoTypeAccess().getDecisionTreeRegressorParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericValue__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumericValueAccess().getFLOATParserRuleCall_0()); }
		ruleFLOAT
		{ after(grammarAccess.getNumericValueAccess().getFLOATParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getNumericValueAccess().getPERCENTParserRuleCall_1()); }
		rulePERCENT
		{ after(grammarAccess.getNumericValueAccess().getPERCENTParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getLanguageTargetAssignment_0()); }
	(rule__Model__LanguageTargetAssignment_0)?
	{ after(grammarAccess.getModelAccess().getLanguageTargetAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getMlAssignment_1()); }
	(rule__Model__MlAssignment_1)
	{ after(grammarAccess.getModelAccess().getMlAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LanguageTarget__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LanguageTarget__Group__0__Impl
	rule__LanguageTarget__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageTarget__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLanguageTargetAccess().getTarget_languageKeyword_0()); }
	'target_language'
	{ after(grammarAccess.getLanguageTargetAccess().getTarget_languageKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageTarget__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LanguageTarget__Group__1__Impl
	rule__LanguageTarget__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageTarget__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLanguageTargetAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getLanguageTargetAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageTarget__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LanguageTarget__Group__2__Impl
	rule__LanguageTarget__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageTarget__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLanguageTargetAccess().getLanguageAssignment_2()); }
	(rule__LanguageTarget__LanguageAssignment_2)
	{ after(grammarAccess.getLanguageTargetAccess().getLanguageAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageTarget__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LanguageTarget__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageTarget__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLanguageTargetAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getLanguageTargetAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MLRegression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MLRegression__Group__0__Impl
	rule__MLRegression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MLRegression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMLRegressionAccess().getDatasetAssignment_0()); }
	(rule__MLRegression__DatasetAssignment_0)
	{ after(grammarAccess.getMLRegressionAccess().getDatasetAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MLRegression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MLRegression__Group__1__Impl
	rule__MLRegression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MLRegression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMLRegressionAccess().getVarsAssignment_1()); }
	(rule__MLRegression__VarsAssignment_1)?
	{ after(grammarAccess.getMLRegressionAccess().getVarsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MLRegression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MLRegression__Group__2__Impl
	rule__MLRegression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MLRegression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMLRegressionAccess().getEvaluationAssignment_2()); }
	(rule__MLRegression__EvaluationAssignment_2)
	{ after(grammarAccess.getMLRegressionAccess().getEvaluationAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MLRegression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MLRegression__Group__3__Impl
	rule__MLRegression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MLRegression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMLRegressionAccess().getAlgoAssignment_3()); }
	(rule__MLRegression__AlgoAssignment_3)
	{ after(grammarAccess.getMLRegressionAccess().getAlgoAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MLRegression__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MLRegression__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MLRegression__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMLRegressionAccess().getCalculateAssignment_4()); }
	(rule__MLRegression__CalculateAssignment_4)
	{ after(grammarAccess.getMLRegressionAccess().getCalculateAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Dataset__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dataset__Group__0__Impl
	rule__Dataset__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Dataset__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDatasetAccess().getImportKeyword_0()); }
	'import'
	{ after(grammarAccess.getDatasetAccess().getImportKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dataset__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dataset__Group__1__Impl
	rule__Dataset__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Dataset__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDatasetAccess().getDataPathAssignment_1()); }
	(rule__Dataset__DataPathAssignment_1)
	{ after(grammarAccess.getDatasetAccess().getDataPathAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dataset__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dataset__Group__2__Impl
	rule__Dataset__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Dataset__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDatasetAccess().getSeparatorAssignment_2()); }
	(rule__Dataset__SeparatorAssignment_2)?
	{ after(grammarAccess.getDatasetAccess().getSeparatorAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dataset__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dataset__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Dataset__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDatasetAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getDatasetAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Partition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Partition__Group__0__Impl
	rule__Partition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Partition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPartitionAccess().getPartitionKeyword_0()); }
	'partition'
	{ after(grammarAccess.getPartitionAccess().getPartitionKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Partition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Partition__Group__1__Impl
	rule__Partition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Partition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPartitionAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getPartitionAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Partition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Partition__Group__2__Impl
	rule__Partition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Partition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPartitionAccess().getTestAssignment_2()); }
	(rule__Partition__TestAssignment_2)
	{ after(grammarAccess.getPartitionAccess().getTestAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Partition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Partition__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Partition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPartitionAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getPartitionAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CrossValidation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CrossValidation__Group__0__Impl
	rule__CrossValidation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CrossValidation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCrossValidationAccess().getCross_validationKeyword_0()); }
	'cross_validation'
	{ after(grammarAccess.getCrossValidationAccess().getCross_validationKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CrossValidation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CrossValidation__Group__1__Impl
	rule__CrossValidation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CrossValidation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCrossValidationAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getCrossValidationAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CrossValidation__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CrossValidation__Group__2__Impl
	rule__CrossValidation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CrossValidation__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCrossValidationAccess().getKAssignment_2()); }
	(rule__CrossValidation__KAssignment_2)
	{ after(grammarAccess.getCrossValidationAccess().getKAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CrossValidation__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CrossValidation__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CrossValidation__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCrossValidationAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getCrossValidationAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Variables__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variables__Group__0__Impl
	rule__Variables__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variables__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariablesAccess().getPredictivesAssignment_0()); }
	(rule__Variables__PredictivesAssignment_0)
	{ after(grammarAccess.getVariablesAccess().getPredictivesAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variables__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variables__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variables__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariablesAccess().getTargetsAssignment_1()); }
	(rule__Variables__TargetsAssignment_1)
	{ after(grammarAccess.getVariablesAccess().getTargetsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ListePredictiveVar__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListePredictiveVar__Group__0__Impl
	rule__ListePredictiveVar__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListePredictiveVar__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListePredictiveVarAccess().getPredictive_varsKeyword_0()); }
	'predictive_vars'
	{ after(grammarAccess.getListePredictiveVarAccess().getPredictive_varsKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListePredictiveVar__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListePredictiveVar__Group__1__Impl
	rule__ListePredictiveVar__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ListePredictiveVar__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListePredictiveVarAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getListePredictiveVarAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListePredictiveVar__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListePredictiveVar__Group__2__Impl
	rule__ListePredictiveVar__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ListePredictiveVar__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListePredictiveVarAccess().getPredVarAssignment_2()); }
	(rule__ListePredictiveVar__PredVarAssignment_2)
	{ after(grammarAccess.getListePredictiveVarAccess().getPredVarAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListePredictiveVar__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListePredictiveVar__Group__3__Impl
	rule__ListePredictiveVar__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ListePredictiveVar__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListePredictiveVarAccess().getGroup_3()); }
	(rule__ListePredictiveVar__Group_3__0)*
	{ after(grammarAccess.getListePredictiveVarAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListePredictiveVar__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListePredictiveVar__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListePredictiveVar__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListePredictiveVarAccess().getSemicolonKeyword_4()); }
	';'
	{ after(grammarAccess.getListePredictiveVarAccess().getSemicolonKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ListePredictiveVar__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListePredictiveVar__Group_3__0__Impl
	rule__ListePredictiveVar__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListePredictiveVar__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListePredictiveVarAccess().getCommaKeyword_3_0()); }
	','
	{ after(grammarAccess.getListePredictiveVarAccess().getCommaKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListePredictiveVar__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListePredictiveVar__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListePredictiveVar__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListePredictiveVarAccess().getPredVarAssignment_3_1()); }
	(rule__ListePredictiveVar__PredVarAssignment_3_1)
	{ after(grammarAccess.getListePredictiveVarAccess().getPredVarAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TargetVar__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TargetVar__Group__0__Impl
	rule__TargetVar__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetVar__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTargetVarAccess().getTarget_varsKeyword_0()); }
	'target_vars'
	{ after(grammarAccess.getTargetVarAccess().getTarget_varsKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetVar__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TargetVar__Group__1__Impl
	rule__TargetVar__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetVar__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTargetVarAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getTargetVarAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetVar__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TargetVar__Group__2__Impl
	rule__TargetVar__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetVar__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTargetVarAccess().getTargetVarAssignment_2()); }
	(rule__TargetVar__TargetVarAssignment_2)
	{ after(grammarAccess.getTargetVarAccess().getTargetVarAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetVar__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TargetVar__Group__3__Impl
	rule__TargetVar__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetVar__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTargetVarAccess().getGroup_3()); }
	(rule__TargetVar__Group_3__0)*
	{ after(grammarAccess.getTargetVarAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetVar__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TargetVar__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetVar__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTargetVarAccess().getSemicolonKeyword_4()); }
	';'
	{ after(grammarAccess.getTargetVarAccess().getSemicolonKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TargetVar__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TargetVar__Group_3__0__Impl
	rule__TargetVar__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetVar__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTargetVarAccess().getCommaKeyword_3_0()); }
	','
	{ after(grammarAccess.getTargetVarAccess().getCommaKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetVar__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TargetVar__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetVar__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTargetVarAccess().getTargetVarAssignment_3_1()); }
	(rule__TargetVar__TargetVarAssignment_3_1)
	{ after(grammarAccess.getTargetVarAccess().getTargetVarAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Calculate__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Calculate__Group__0__Impl
	rule__Calculate__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Calculate__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCalculateAccess().getCalculateKeyword_0()); }
	'calculate'
	{ after(grammarAccess.getCalculateAccess().getCalculateKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Calculate__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Calculate__Group__1__Impl
	rule__Calculate__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Calculate__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCalculateAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getCalculateAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Calculate__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Calculate__Group__2__Impl
	rule__Calculate__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Calculate__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCalculateAccess().getCalculateTypeAssignment_2()); }
	(rule__Calculate__CalculateTypeAssignment_2)
	{ after(grammarAccess.getCalculateAccess().getCalculateTypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Calculate__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Calculate__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Calculate__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCalculateAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getCalculateAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Algo__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Algo__Group__0__Impl
	rule__Algo__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Algo__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAlgoAccess().getAlgorithmKeyword_0()); }
	'algorithm'
	{ after(grammarAccess.getAlgoAccess().getAlgorithmKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Algo__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Algo__Group__1__Impl
	rule__Algo__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Algo__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAlgoAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getAlgoAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Algo__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Algo__Group__2__Impl
	rule__Algo__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Algo__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAlgoAccess().getAlgoAssignment_2()); }
	(rule__Algo__AlgoAssignment_2)
	{ after(grammarAccess.getAlgoAccess().getAlgoAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Algo__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Algo__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Algo__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAlgoAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getAlgoAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FLOAT__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FLOAT__Group__0__Impl
	rule__FLOAT__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FLOAT__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFLOATAccess().getValueAssignment_0()); }
	(rule__FLOAT__ValueAssignment_0)
	{ after(grammarAccess.getFLOATAccess().getValueAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FLOAT__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FLOAT__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FLOAT__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFLOATAccess().getGroup_1()); }
	(rule__FLOAT__Group_1__0)?
	{ after(grammarAccess.getFLOATAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FLOAT__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FLOAT__Group_1__0__Impl
	rule__FLOAT__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FLOAT__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFLOATAccess().getFullStopKeyword_1_0()); }
	'.'
	{ after(grammarAccess.getFLOATAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FLOAT__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FLOAT__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FLOAT__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFLOATAccess().getDecimalAssignment_1_1()); }
	(rule__FLOAT__DecimalAssignment_1_1)
	{ after(grammarAccess.getFLOATAccess().getDecimalAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PERCENT__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PERCENT__Group__0__Impl
	rule__PERCENT__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PERCENT__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPERCENTAccess().getFloatAssignment_0()); }
	(rule__PERCENT__FloatAssignment_0)
	{ after(grammarAccess.getPERCENTAccess().getFloatAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PERCENT__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PERCENT__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PERCENT__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPERCENTAccess().getPercentSignKeyword_1()); }
	'%'
	{ after(grammarAccess.getPERCENTAccess().getPercentSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__LanguageTargetAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getLanguageTargetLanguageTargetParserRuleCall_0_0()); }
		ruleLanguageTarget
		{ after(grammarAccess.getModelAccess().getLanguageTargetLanguageTargetParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__MlAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getMlMLRegressionParserRuleCall_1_0()); }
		ruleMLRegression
		{ after(grammarAccess.getModelAccess().getMlMLRegressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LanguageTarget__LanguageAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLanguageTargetAccess().getLanguageAlternatives_2_0()); }
		(rule__LanguageTarget__LanguageAlternatives_2_0)
		{ after(grammarAccess.getLanguageTargetAccess().getLanguageAlternatives_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MLRegression__DatasetAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMLRegressionAccess().getDatasetDatasetParserRuleCall_0_0()); }
		ruleDataset
		{ after(grammarAccess.getMLRegressionAccess().getDatasetDatasetParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MLRegression__VarsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMLRegressionAccess().getVarsVariablesParserRuleCall_1_0()); }
		ruleVariables
		{ after(grammarAccess.getMLRegressionAccess().getVarsVariablesParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MLRegression__EvaluationAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMLRegressionAccess().getEvaluationEvaluationTypeParserRuleCall_2_0()); }
		ruleEvaluationType
		{ after(grammarAccess.getMLRegressionAccess().getEvaluationEvaluationTypeParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MLRegression__AlgoAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMLRegressionAccess().getAlgoAlgoParserRuleCall_3_0()); }
		ruleAlgo
		{ after(grammarAccess.getMLRegressionAccess().getAlgoAlgoParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MLRegression__CalculateAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMLRegressionAccess().getCalculateCalculateParserRuleCall_4_0()); }
		ruleCalculate
		{ after(grammarAccess.getMLRegressionAccess().getCalculateCalculateParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dataset__DataPathAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDatasetAccess().getDataPathSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getDatasetAccess().getDataPathSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dataset__SeparatorAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDatasetAccess().getSeparatorSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getDatasetAccess().getSeparatorSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Partition__TestAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPartitionAccess().getTestNumericValueParserRuleCall_2_0()); }
		ruleNumericValue
		{ after(grammarAccess.getPartitionAccess().getTestNumericValueParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CrossValidation__KAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCrossValidationAccess().getKINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getCrossValidationAccess().getKINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variables__PredictivesAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariablesAccess().getPredictivesListePredictiveVarParserRuleCall_0_0()); }
		ruleListePredictiveVar
		{ after(grammarAccess.getVariablesAccess().getPredictivesListePredictiveVarParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variables__TargetsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariablesAccess().getTargetsTargetVarParserRuleCall_1_0()); }
		ruleTargetVar
		{ after(grammarAccess.getVariablesAccess().getTargetsTargetVarParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListePredictiveVar__PredVarAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListePredictiveVarAccess().getPredVarSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getListePredictiveVarAccess().getPredVarSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListePredictiveVar__PredVarAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListePredictiveVarAccess().getPredVarSTRINGTerminalRuleCall_3_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getListePredictiveVarAccess().getPredVarSTRINGTerminalRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetVar__TargetVarAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTargetVarAccess().getTargetVarSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getTargetVarAccess().getTargetVarSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetVar__TargetVarAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTargetVarAccess().getTargetVarSTRINGTerminalRuleCall_3_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getTargetVarAccess().getTargetVarSTRINGTerminalRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Calculate__CalculateTypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCalculateAccess().getCalculateTypeCalculateTypeParserRuleCall_2_0()); }
		ruleCalculateType
		{ after(grammarAccess.getCalculateAccess().getCalculateTypeCalculateTypeParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Algo__AlgoAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAlgoAccess().getAlgoAlgoTypeParserRuleCall_2_0()); }
		ruleAlgoType
		{ after(grammarAccess.getAlgoAccess().getAlgoAlgoTypeParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FLOAT__ValueAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFLOATAccess().getValueINTTerminalRuleCall_0_0()); }
		RULE_INT
		{ after(grammarAccess.getFLOATAccess().getValueINTTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FLOAT__DecimalAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFLOATAccess().getDecimalINTTerminalRuleCall_1_1_0()); }
		RULE_INT
		{ after(grammarAccess.getFLOATAccess().getDecimalINTTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PERCENT__FloatAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPERCENTAccess().getFloatFLOATParserRuleCall_0_0()); }
		ruleFLOAT
		{ after(grammarAccess.getPERCENTAccess().getFloatFLOATParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
