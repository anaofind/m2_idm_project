/*
 * generated by Xtext 2.23.0
 */
grammar InternalMLRegression;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package m2.idm.project.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package m2.idm.project.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import m2.idm.project.services.MLRegressionGrammarAccess;

}
@parser::members {
	private MLRegressionGrammarAccess grammarAccess;

	public void setGrammarAccess(MLRegressionGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleMLRegression
entryRuleMLRegression
:
{ before(grammarAccess.getMLRegressionRule()); }
	 ruleMLRegression
{ after(grammarAccess.getMLRegressionRule()); } 
	 EOF 
;

// Rule MLRegression
ruleMLRegression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMLRegressionAccess().getGroup()); }
		(rule__MLRegression__Group__0)
		{ after(grammarAccess.getMLRegressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDataset
entryRuleDataset
:
{ before(grammarAccess.getDatasetRule()); }
	 ruleDataset
{ after(grammarAccess.getDatasetRule()); } 
	 EOF 
;

// Rule Dataset
ruleDataset 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDatasetAccess().getGroup()); }
		(rule__Dataset__Group__0)
		{ after(grammarAccess.getDatasetAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLearningType
entryRuleLearningType
:
{ before(grammarAccess.getLearningTypeRule()); }
	 ruleLearningType
{ after(grammarAccess.getLearningTypeRule()); } 
	 EOF 
;

// Rule LearningType
ruleLearningType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLearningTypeAccess().getGroup()); }
		(rule__LearningType__Group__0)
		{ after(grammarAccess.getLearningTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTraining
entryRuleTraining
:
{ before(grammarAccess.getTrainingRule()); }
	 ruleTraining
{ after(grammarAccess.getTrainingRule()); } 
	 EOF 
;

// Rule Training
ruleTraining 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTrainingAccess().getGroup()); }
		(rule__Training__Group__0)
		{ after(grammarAccess.getTrainingAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCrossValidation
entryRuleCrossValidation
:
{ before(grammarAccess.getCrossValidationRule()); }
	 ruleCrossValidation
{ after(grammarAccess.getCrossValidationRule()); } 
	 EOF 
;

// Rule CrossValidation
ruleCrossValidation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCrossValidationAccess().getCross_validationKeyword()); }
		'cross_validation'
		{ after(grammarAccess.getCrossValidationAccess().getCross_validationKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariables
entryRuleVariables
:
{ before(grammarAccess.getVariablesRule()); }
	 ruleVariables
{ after(grammarAccess.getVariablesRule()); } 
	 EOF 
;

// Rule Variables
ruleVariables 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariablesAccess().getGroup()); }
		(rule__Variables__Group__0)
		{ after(grammarAccess.getVariablesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePredictives
entryRulePredictives
:
{ before(grammarAccess.getPredictivesRule()); }
	 rulePredictives
{ after(grammarAccess.getPredictivesRule()); } 
	 EOF 
;

// Rule Predictives
rulePredictives 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPredictivesAccess().getGroup()); }
		(rule__Predictives__Group__0)
		{ after(grammarAccess.getPredictivesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTargets
entryRuleTargets
:
{ before(grammarAccess.getTargetsRule()); }
	 ruleTargets
{ after(grammarAccess.getTargetsRule()); } 
	 EOF 
;

// Rule Targets
ruleTargets 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTargetsAccess().getGroup()); }
		(rule__Targets__Group__0)
		{ after(grammarAccess.getTargetsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVar
entryRuleVar
:
{ before(grammarAccess.getVarRule()); }
	 ruleVar
{ after(grammarAccess.getVarRule()); } 
	 EOF 
;

// Rule Var
ruleVar 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarAccess().getNameVarAssignment()); }
		(rule__Var__NameVarAssignment)
		{ after(grammarAccess.getVarAccess().getNameVarAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleReturnType
entryRuleReturnType
:
{ before(grammarAccess.getReturnTypeRule()); }
	 ruleReturnType
{ after(grammarAccess.getReturnTypeRule()); } 
	 EOF 
;

// Rule ReturnType
ruleReturnType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReturnTypeAccess().getGroup()); }
		(rule__ReturnType__Group__0)
		{ after(grammarAccess.getReturnTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringValue
entryRuleStringValue
:
{ before(grammarAccess.getStringValueRule()); }
	 ruleStringValue
{ after(grammarAccess.getStringValueRule()); } 
	 EOF 
;

// Rule StringValue
ruleStringValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringValueAccess().getValueAssignment()); }
		(rule__StringValue__ValueAssignment)
		{ after(grammarAccess.getStringValueAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumberValue
entryRuleNumberValue
:
{ before(grammarAccess.getNumberValueRule()); }
	 ruleNumberValue
{ after(grammarAccess.getNumberValueRule()); } 
	 EOF 
;

// Rule NumberValue
ruleNumberValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumberValueAccess().getGroup()); }
		(rule__NumberValue__Group__0)
		{ after(grammarAccess.getNumberValueAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePercentValue
entryRulePercentValue
:
{ before(grammarAccess.getPercentValueRule()); }
	 rulePercentValue
{ after(grammarAccess.getPercentValueRule()); } 
	 EOF 
;

// Rule PercentValue
rulePercentValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPercentValueAccess().getGroup()); }
		(rule__PercentValue__Group__0)
		{ after(grammarAccess.getPercentValueAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBooleanValue
entryRuleBooleanValue
:
{ before(grammarAccess.getBooleanValueRule()); }
	 ruleBooleanValue
{ after(grammarAccess.getBooleanValueRule()); } 
	 EOF 
;

// Rule BooleanValue
ruleBooleanValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanValueAccess().getValueAssignment()); }
		(rule__BooleanValue__ValueAssignment)
		{ after(grammarAccess.getBooleanValueAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LearningType__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLearningTypeAccess().getTrainingAssignment_1_0()); }
		(rule__LearningType__TrainingAssignment_1_0)
		{ after(grammarAccess.getLearningTypeAccess().getTrainingAssignment_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getLearningTypeAccess().getCrossValidationAssignment_1_1()); }
		(rule__LearningType__CrossValidationAssignment_1_1)
		{ after(grammarAccess.getLearningTypeAccess().getCrossValidationAssignment_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Training__TrainingAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTrainingAccess().getTrainingNumberValueParserRuleCall_1_0_0()); }
		ruleNumberValue
		{ after(grammarAccess.getTrainingAccess().getTrainingNumberValueParserRuleCall_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getTrainingAccess().getTrainingPercentValueParserRuleCall_1_0_1()); }
		rulePercentValue
		{ after(grammarAccess.getTrainingAccess().getTrainingPercentValueParserRuleCall_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanValue__ValueAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanValueAccess().getValueFalseKeyword_0_0()); }
		'false'
		{ after(grammarAccess.getBooleanValueAccess().getValueFalseKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanValueAccess().getValueTrueKeyword_0_1()); }
		'true'
		{ after(grammarAccess.getBooleanValueAccess().getValueTrueKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MLRegression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MLRegression__Group__0__Impl
	rule__MLRegression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MLRegression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMLRegressionAccess().getDatasetAssignment_0()); }
	(rule__MLRegression__DatasetAssignment_0)
	{ after(grammarAccess.getMLRegressionAccess().getDatasetAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MLRegression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MLRegression__Group__1__Impl
	rule__MLRegression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MLRegression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMLRegressionAccess().getLearningTypeAssignment_1()); }
	(rule__MLRegression__LearningTypeAssignment_1)?
	{ after(grammarAccess.getMLRegressionAccess().getLearningTypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MLRegression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MLRegression__Group__2__Impl
	rule__MLRegression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MLRegression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMLRegressionAccess().getVarsAssignment_2()); }
	(rule__MLRegression__VarsAssignment_2)
	{ after(grammarAccess.getMLRegressionAccess().getVarsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MLRegression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MLRegression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MLRegression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMLRegressionAccess().getReturnTypeAssignment_3()); }
	(rule__MLRegression__ReturnTypeAssignment_3)?
	{ after(grammarAccess.getMLRegressionAccess().getReturnTypeAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Dataset__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dataset__Group__0__Impl
	rule__Dataset__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Dataset__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDatasetAccess().getDatasetAssignment_0()); }
	(rule__Dataset__DatasetAssignment_0)
	{ after(grammarAccess.getDatasetAccess().getDatasetAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dataset__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dataset__Group__1__Impl
	rule__Dataset__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Dataset__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDatasetAccess().getDataAssignment_1()); }
	(rule__Dataset__DataAssignment_1)
	{ after(grammarAccess.getDatasetAccess().getDataAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dataset__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dataset__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Dataset__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDatasetAccess().getSemicolonKeyword_2()); }
	';'
	{ after(grammarAccess.getDatasetAccess().getSemicolonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LearningType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LearningType__Group__0__Impl
	rule__LearningType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LearningType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLearningTypeAccess().getLearningKeyword_0()); }
	'learning'
	{ after(grammarAccess.getLearningTypeAccess().getLearningKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LearningType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LearningType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LearningType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLearningTypeAccess().getAlternatives_1()); }
	(rule__LearningType__Alternatives_1)
	{ after(grammarAccess.getLearningTypeAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Training__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Training__Group__0__Impl
	rule__Training__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Training__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrainingAccess().getTrainingKeyword_0()); }
	'training'
	{ after(grammarAccess.getTrainingAccess().getTrainingKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Training__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Training__Group__1__Impl
	rule__Training__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Training__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrainingAccess().getTrainingAssignment_1()); }
	(rule__Training__TrainingAssignment_1)
	{ after(grammarAccess.getTrainingAccess().getTrainingAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Training__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Training__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Training__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrainingAccess().getSemicolonKeyword_2()); }
	';'
	{ after(grammarAccess.getTrainingAccess().getSemicolonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Variables__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variables__Group__0__Impl
	rule__Variables__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variables__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariablesAccess().getPredictivesAssignment_0()); }
	(rule__Variables__PredictivesAssignment_0)
	{ after(grammarAccess.getVariablesAccess().getPredictivesAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variables__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variables__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variables__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariablesAccess().getTargetsAssignment_1()); }
	(rule__Variables__TargetsAssignment_1)
	{ after(grammarAccess.getVariablesAccess().getTargetsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Predictives__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Predictives__Group__0__Impl
	rule__Predictives__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Predictives__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredictivesAccess().getPredictKeyword_0()); }
	'predict'
	{ after(grammarAccess.getPredictivesAccess().getPredictKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predictives__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Predictives__Group__1__Impl
	rule__Predictives__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Predictives__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredictivesAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getPredictivesAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predictives__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Predictives__Group__2__Impl
	rule__Predictives__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Predictives__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getPredictivesAccess().getVarsAssignment_2()); }
		(rule__Predictives__VarsAssignment_2)
		{ after(grammarAccess.getPredictivesAccess().getVarsAssignment_2()); }
	)
	(
		{ before(grammarAccess.getPredictivesAccess().getVarsAssignment_2()); }
		(rule__Predictives__VarsAssignment_2)*
		{ after(grammarAccess.getPredictivesAccess().getVarsAssignment_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predictives__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Predictives__Group__3__Impl
	rule__Predictives__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Predictives__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredictivesAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getPredictivesAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predictives__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Predictives__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Predictives__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredictivesAccess().getSemicolonKeyword_4()); }
	';'
	{ after(grammarAccess.getPredictivesAccess().getSemicolonKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Targets__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Targets__Group__0__Impl
	rule__Targets__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Targets__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTargetsAccess().getTargetKeyword_0()); }
	'target'
	{ after(grammarAccess.getTargetsAccess().getTargetKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Targets__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Targets__Group__1__Impl
	rule__Targets__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Targets__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTargetsAccess().getVarAssignment_1()); }
	(rule__Targets__VarAssignment_1)
	{ after(grammarAccess.getTargetsAccess().getVarAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Targets__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Targets__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Targets__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTargetsAccess().getSemicolonKeyword_2()); }
	';'
	{ after(grammarAccess.getTargetsAccess().getSemicolonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReturnType__Group__0__Impl
	rule__ReturnType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReturnTypeAccess().getReturnKeyword_0()); }
	'return'
	{ after(grammarAccess.getReturnTypeAccess().getReturnKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReturnType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReturnTypeAccess().getNameReturnAssignment_1()); }
	(rule__ReturnType__NameReturnAssignment_1)
	{ after(grammarAccess.getReturnTypeAccess().getNameReturnAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NumberValue__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumberValue__Group__0__Impl
	rule__NumberValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberValue__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberValueAccess().getValueAssignment_0()); }
	(rule__NumberValue__ValueAssignment_0)
	{ after(grammarAccess.getNumberValueAccess().getValueAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberValue__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumberValue__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberValue__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberValueAccess().getGroup_1()); }
	(rule__NumberValue__Group_1__0)?
	{ after(grammarAccess.getNumberValueAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NumberValue__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumberValue__Group_1__0__Impl
	rule__NumberValue__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberValue__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberValueAccess().getFullStopKeyword_1_0()); }
	'.'
	{ after(grammarAccess.getNumberValueAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberValue__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumberValue__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberValue__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberValueAccess().getDecimalAssignment_1_1()); }
	(rule__NumberValue__DecimalAssignment_1_1)*
	{ after(grammarAccess.getNumberValueAccess().getDecimalAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PercentValue__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PercentValue__Group__0__Impl
	rule__PercentValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PercentValue__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPercentValueAccess().getNumberValueParserRuleCall_0()); }
	ruleNumberValue
	{ after(grammarAccess.getPercentValueAccess().getNumberValueParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PercentValue__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PercentValue__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PercentValue__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPercentValueAccess().getPercentSignKeyword_1()); }
	'%'
	{ after(grammarAccess.getPercentValueAccess().getPercentSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MLRegression__DatasetAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMLRegressionAccess().getDatasetDatasetParserRuleCall_0_0()); }
		ruleDataset
		{ after(grammarAccess.getMLRegressionAccess().getDatasetDatasetParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MLRegression__LearningTypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMLRegressionAccess().getLearningTypeLearningTypeParserRuleCall_1_0()); }
		ruleLearningType
		{ after(grammarAccess.getMLRegressionAccess().getLearningTypeLearningTypeParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MLRegression__VarsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMLRegressionAccess().getVarsVariablesParserRuleCall_2_0()); }
		ruleVariables
		{ after(grammarAccess.getMLRegressionAccess().getVarsVariablesParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MLRegression__ReturnTypeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMLRegressionAccess().getReturnTypeReturnTypeParserRuleCall_3_0()); }
		ruleReturnType
		{ after(grammarAccess.getMLRegressionAccess().getReturnTypeReturnTypeParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dataset__DatasetAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDatasetAccess().getDatasetImportKeyword_0_0()); }
		(
			{ before(grammarAccess.getDatasetAccess().getDatasetImportKeyword_0_0()); }
			'import'
			{ after(grammarAccess.getDatasetAccess().getDatasetImportKeyword_0_0()); }
		)
		{ after(grammarAccess.getDatasetAccess().getDatasetImportKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dataset__DataAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDatasetAccess().getDataStringValueParserRuleCall_1_0()); }
		ruleStringValue
		{ after(grammarAccess.getDatasetAccess().getDataStringValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LearningType__TrainingAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLearningTypeAccess().getTrainingTrainingParserRuleCall_1_0_0()); }
		ruleTraining
		{ after(grammarAccess.getLearningTypeAccess().getTrainingTrainingParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LearningType__CrossValidationAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLearningTypeAccess().getCrossValidationCrossValidationParserRuleCall_1_1_0()); }
		ruleCrossValidation
		{ after(grammarAccess.getLearningTypeAccess().getCrossValidationCrossValidationParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Training__TrainingAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTrainingAccess().getTrainingAlternatives_1_0()); }
		(rule__Training__TrainingAlternatives_1_0)
		{ after(grammarAccess.getTrainingAccess().getTrainingAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variables__PredictivesAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariablesAccess().getPredictivesPredictivesParserRuleCall_0_0()); }
		rulePredictives
		{ after(grammarAccess.getVariablesAccess().getPredictivesPredictivesParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variables__TargetsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariablesAccess().getTargetsTargetsParserRuleCall_1_0()); }
		ruleTargets
		{ after(grammarAccess.getVariablesAccess().getTargetsTargetsParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predictives__VarsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredictivesAccess().getVarsVarParserRuleCall_2_0()); }
		ruleVar
		{ after(grammarAccess.getPredictivesAccess().getVarsVarParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Targets__VarAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTargetsAccess().getVarVarParserRuleCall_1_0()); }
		ruleVar
		{ after(grammarAccess.getTargetsAccess().getVarVarParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Var__NameVarAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarAccess().getNameVarStringValueParserRuleCall_0()); }
		ruleStringValue
		{ after(grammarAccess.getVarAccess().getNameVarStringValueParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnType__NameReturnAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReturnTypeAccess().getNameReturnStringValueParserRuleCall_1_0()); }
		ruleStringValue
		{ after(grammarAccess.getReturnTypeAccess().getNameReturnStringValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringValue__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberValue__ValueAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberValueAccess().getValueINTTerminalRuleCall_0_0()); }
		RULE_INT
		{ after(grammarAccess.getNumberValueAccess().getValueINTTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberValue__DecimalAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberValueAccess().getDecimalINTTerminalRuleCall_1_1_0()); }
		RULE_INT
		{ after(grammarAccess.getNumberValueAccess().getDecimalINTTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanValue__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanValueAccess().getValueAlternatives_0()); }
		(rule__BooleanValue__ValueAlternatives_0)
		{ after(grammarAccess.getBooleanValueAccess().getValueAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
