/*
 * generated by Xtext 2.23.0
 */
grammar InternalMLRegression;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package m2.idm.project.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package m2.idm.project.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import m2.idm.project.services.MLRegressionGrammarAccess;

}
@parser::members {
	private MLRegressionGrammarAccess grammarAccess;

	public void setGrammarAccess(MLRegressionGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleMLRegression
entryRuleMLRegression
:
{ before(grammarAccess.getMLRegressionRule()); }
	 ruleMLRegression
{ after(grammarAccess.getMLRegressionRule()); } 
	 EOF 
;

// Rule MLRegression
ruleMLRegression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMLRegressionAccess().getGroup()); }
		(rule__MLRegression__Group__0)
		{ after(grammarAccess.getMLRegressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCalculate
entryRuleCalculate
:
{ before(grammarAccess.getCalculateRule()); }
	 ruleCalculate
{ after(grammarAccess.getCalculateRule()); } 
	 EOF 
;

// Rule Calculate
ruleCalculate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCalculateAccess().getGroup()); }
		(rule__Calculate__Group__0)
		{ after(grammarAccess.getCalculateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCalculateType
entryRuleCalculateType
:
{ before(grammarAccess.getCalculateTypeRule()); }
	 ruleCalculateType
{ after(grammarAccess.getCalculateTypeRule()); } 
	 EOF 
;

// Rule CalculateType
ruleCalculateType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCalculateTypeAccess().getAlternatives()); }
		(rule__CalculateType__Alternatives)
		{ after(grammarAccess.getCalculateTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDataset
entryRuleDataset
:
{ before(grammarAccess.getDatasetRule()); }
	 ruleDataset
{ after(grammarAccess.getDatasetRule()); } 
	 EOF 
;

// Rule Dataset
ruleDataset 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDatasetAccess().getGroup()); }
		(rule__Dataset__Group__0)
		{ after(grammarAccess.getDatasetAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEvaluationType
entryRuleEvaluationType
:
{ before(grammarAccess.getEvaluationTypeRule()); }
	 ruleEvaluationType
{ after(grammarAccess.getEvaluationTypeRule()); } 
	 EOF 
;

// Rule EvaluationType
ruleEvaluationType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEvaluationTypeAccess().getAlternatives()); }
		(rule__EvaluationType__Alternatives)
		{ after(grammarAccess.getEvaluationTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePartition
entryRulePartition
:
{ before(grammarAccess.getPartitionRule()); }
	 rulePartition
{ after(grammarAccess.getPartitionRule()); } 
	 EOF 
;

// Rule Partition
rulePartition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPartitionAccess().getGroup()); }
		(rule__Partition__Group__0)
		{ after(grammarAccess.getPartitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCrossValidation
entryRuleCrossValidation
:
{ before(grammarAccess.getCrossValidationRule()); }
	 ruleCrossValidation
{ after(grammarAccess.getCrossValidationRule()); } 
	 EOF 
;

// Rule CrossValidation
ruleCrossValidation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCrossValidationAccess().getGroup()); }
		(rule__CrossValidation__Group__0)
		{ after(grammarAccess.getCrossValidationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariables
entryRuleVariables
:
{ before(grammarAccess.getVariablesRule()); }
	 ruleVariables
{ after(grammarAccess.getVariablesRule()); } 
	 EOF 
;

// Rule Variables
ruleVariables 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariablesAccess().getGroup()); }
		(rule__Variables__Group__0)
		{ after(grammarAccess.getVariablesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleListePredictiveVar
entryRuleListePredictiveVar
:
{ before(grammarAccess.getListePredictiveVarRule()); }
	 ruleListePredictiveVar
{ after(grammarAccess.getListePredictiveVarRule()); } 
	 EOF 
;

// Rule ListePredictiveVar
ruleListePredictiveVar 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getListePredictiveVarAccess().getGroup()); }
		(rule__ListePredictiveVar__Group__0)
		{ after(grammarAccess.getListePredictiveVarAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTargetVar
entryRuleTargetVar
:
{ before(grammarAccess.getTargetVarRule()); }
	 ruleTargetVar
{ after(grammarAccess.getTargetVarRule()); } 
	 EOF 
;

// Rule TargetVar
ruleTargetVar 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTargetVarAccess().getGroup()); }
		(rule__TargetVar__Group__0)
		{ after(grammarAccess.getTargetVarAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAlgo
entryRuleAlgo
:
{ before(grammarAccess.getAlgoRule()); }
	 ruleAlgo
{ after(grammarAccess.getAlgoRule()); } 
	 EOF 
;

// Rule Algo
ruleAlgo 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAlgoAccess().getGroup()); }
		(rule__Algo__Group__0)
		{ after(grammarAccess.getAlgoAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAlgoML
entryRuleAlgoML
:
{ before(grammarAccess.getAlgoMLRule()); }
	 ruleAlgoML
{ after(grammarAccess.getAlgoMLRule()); } 
	 EOF 
;

// Rule AlgoML
ruleAlgoML 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAlgoMLAccess().getAlternatives()); }
		(rule__AlgoML__Alternatives)
		{ after(grammarAccess.getAlgoMLAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLineRegress
entryRuleLineRegress
:
{ before(grammarAccess.getLineRegressRule()); }
	 ruleLineRegress
{ after(grammarAccess.getLineRegressRule()); } 
	 EOF 
;

// Rule LineRegress
ruleLineRegress 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLineRegressAccess().getGroup()); }
		(rule__LineRegress__Group__0)
		{ after(grammarAccess.getLineRegressAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDecisionTreeRegressor
entryRuleDecisionTreeRegressor
:
{ before(grammarAccess.getDecisionTreeRegressorRule()); }
	 ruleDecisionTreeRegressor
{ after(grammarAccess.getDecisionTreeRegressorRule()); } 
	 EOF 
;

// Rule DecisionTreeRegressor
ruleDecisionTreeRegressor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDecisionTreeRegressorAccess().getGroup()); }
		(rule__DecisionTreeRegressor__Group__0)
		{ after(grammarAccess.getDecisionTreeRegressorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSVR
entryRuleSVR
:
{ before(grammarAccess.getSVRRule()); }
	 ruleSVR
{ after(grammarAccess.getSVRRule()); } 
	 EOF 
;

// Rule SVR
ruleSVR 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSVRAccess().getGroup()); }
		(rule__SVR__Group__0)
		{ after(grammarAccess.getSVRAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMinError
entryRuleMinError
:
{ before(grammarAccess.getMinErrorRule()); }
	 ruleMinError
{ after(grammarAccess.getMinErrorRule()); } 
	 EOF 
;

// Rule MinError
ruleMinError 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMinErrorAccess().getMin_errorKeyword()); }
		'min_error'
		{ after(grammarAccess.getMinErrorAccess().getMin_errorKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMinSquaredError
entryRuleMinSquaredError
:
{ before(grammarAccess.getMinSquaredErrorRule()); }
	 ruleMinSquaredError
{ after(grammarAccess.getMinSquaredErrorRule()); } 
	 EOF 
;

// Rule MinSquaredError
ruleMinSquaredError 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMinSquaredErrorAccess().getMin_square_errorKeyword()); }
		'min_square_error'
		{ after(grammarAccess.getMinSquaredErrorAccess().getMin_square_errorKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSumsSquaredError
entryRuleSumsSquaredError
:
{ before(grammarAccess.getSumsSquaredErrorRule()); }
	 ruleSumsSquaredError
{ after(grammarAccess.getSumsSquaredErrorRule()); } 
	 EOF 
;

// Rule SumsSquaredError
ruleSumsSquaredError 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSumsSquaredErrorAccess().getSums_square_errorKeyword()); }
		'sums_square_error'
		{ after(grammarAccess.getSumsSquaredErrorAccess().getSums_square_errorKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringValue
entryRuleStringValue
:
{ before(grammarAccess.getStringValueRule()); }
	 ruleStringValue
{ after(grammarAccess.getStringValueRule()); } 
	 EOF 
;

// Rule StringValue
ruleStringValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringValueAccess().getValueAssignment()); }
		(rule__StringValue__ValueAssignment)
		{ after(grammarAccess.getStringValueAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumericValue
entryRuleNumericValue
:
{ before(grammarAccess.getNumericValueRule()); }
	 ruleNumericValue
{ after(grammarAccess.getNumericValueRule()); } 
	 EOF 
;

// Rule NumericValue
ruleNumericValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumericValueAccess().getAlternatives()); }
		(rule__NumericValue__Alternatives)
		{ after(grammarAccess.getNumericValueAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumberValue
entryRuleNumberValue
:
{ before(grammarAccess.getNumberValueRule()); }
	 ruleNumberValue
{ after(grammarAccess.getNumberValueRule()); } 
	 EOF 
;

// Rule NumberValue
ruleNumberValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumberValueAccess().getGroup()); }
		(rule__NumberValue__Group__0)
		{ after(grammarAccess.getNumberValueAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntegerValue
entryRuleIntegerValue
:
{ before(grammarAccess.getIntegerValueRule()); }
	 ruleIntegerValue
{ after(grammarAccess.getIntegerValueRule()); } 
	 EOF 
;

// Rule IntegerValue
ruleIntegerValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntegerValueAccess().getValueAssignment()); }
		(rule__IntegerValue__ValueAssignment)
		{ after(grammarAccess.getIntegerValueAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePercentValue
entryRulePercentValue
:
{ before(grammarAccess.getPercentValueRule()); }
	 rulePercentValue
{ after(grammarAccess.getPercentValueRule()); } 
	 EOF 
;

// Rule PercentValue
rulePercentValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPercentValueAccess().getGroup()); }
		(rule__PercentValue__Group__0)
		{ after(grammarAccess.getPercentValueAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBooleanValue
entryRuleBooleanValue
:
{ before(grammarAccess.getBooleanValueRule()); }
	 ruleBooleanValue
{ after(grammarAccess.getBooleanValueRule()); } 
	 EOF 
;

// Rule BooleanValue
ruleBooleanValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanValueAccess().getValueAssignment()); }
		(rule__BooleanValue__ValueAssignment)
		{ after(grammarAccess.getBooleanValueAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CalculateType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCalculateTypeAccess().getMinErrorParserRuleCall_0()); }
		ruleMinError
		{ after(grammarAccess.getCalculateTypeAccess().getMinErrorParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getCalculateTypeAccess().getMinSquaredErrorParserRuleCall_1()); }
		ruleMinSquaredError
		{ after(grammarAccess.getCalculateTypeAccess().getMinSquaredErrorParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getCalculateTypeAccess().getSumsSquaredErrorParserRuleCall_2()); }
		ruleSumsSquaredError
		{ after(grammarAccess.getCalculateTypeAccess().getSumsSquaredErrorParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EvaluationType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEvaluationTypeAccess().getPartitionParserRuleCall_0()); }
		rulePartition
		{ after(grammarAccess.getEvaluationTypeAccess().getPartitionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEvaluationTypeAccess().getCrossValidationParserRuleCall_1()); }
		ruleCrossValidation
		{ after(grammarAccess.getEvaluationTypeAccess().getCrossValidationParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AlgoML__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAlgoMLAccess().getLineRegressParserRuleCall_0()); }
		ruleLineRegress
		{ after(grammarAccess.getAlgoMLAccess().getLineRegressParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getAlgoMLAccess().getSVRParserRuleCall_1()); }
		ruleSVR
		{ after(grammarAccess.getAlgoMLAccess().getSVRParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getAlgoMLAccess().getDecisionTreeRegressorParserRuleCall_2()); }
		ruleDecisionTreeRegressor
		{ after(grammarAccess.getAlgoMLAccess().getDecisionTreeRegressorParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericValue__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumericValueAccess().getNumberValueParserRuleCall_0()); }
		ruleNumberValue
		{ after(grammarAccess.getNumericValueAccess().getNumberValueParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getNumericValueAccess().getPercentValueParserRuleCall_1()); }
		rulePercentValue
		{ after(grammarAccess.getNumericValueAccess().getPercentValueParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanValue__ValueAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanValueAccess().getValueFalseKeyword_0_0()); }
		'false'
		{ after(grammarAccess.getBooleanValueAccess().getValueFalseKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanValueAccess().getValueTrueKeyword_0_1()); }
		'true'
		{ after(grammarAccess.getBooleanValueAccess().getValueTrueKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MLRegression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MLRegression__Group__0__Impl
	rule__MLRegression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MLRegression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMLRegressionAccess().getDatasetAssignment_0()); }
	(rule__MLRegression__DatasetAssignment_0)
	{ after(grammarAccess.getMLRegressionAccess().getDatasetAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MLRegression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MLRegression__Group__1__Impl
	rule__MLRegression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MLRegression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMLRegressionAccess().getEvaluationAssignment_1()); }
	(rule__MLRegression__EvaluationAssignment_1)
	{ after(grammarAccess.getMLRegressionAccess().getEvaluationAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MLRegression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MLRegression__Group__2__Impl
	rule__MLRegression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MLRegression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMLRegressionAccess().getVarsAssignment_2()); }
	(rule__MLRegression__VarsAssignment_2)?
	{ after(grammarAccess.getMLRegressionAccess().getVarsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MLRegression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MLRegression__Group__3__Impl
	rule__MLRegression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MLRegression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMLRegressionAccess().getCalculateAssignment_3()); }
	(rule__MLRegression__CalculateAssignment_3)
	{ after(grammarAccess.getMLRegressionAccess().getCalculateAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MLRegression__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MLRegression__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MLRegression__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMLRegressionAccess().getAlgoAssignment_4()); }
	(rule__MLRegression__AlgoAssignment_4)
	{ after(grammarAccess.getMLRegressionAccess().getAlgoAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Calculate__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Calculate__Group__0__Impl
	rule__Calculate__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Calculate__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCalculateAccess().getCalculateKeyword_0()); }
	'calculate'
	{ after(grammarAccess.getCalculateAccess().getCalculateKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Calculate__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Calculate__Group__1__Impl
	rule__Calculate__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Calculate__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCalculateAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getCalculateAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Calculate__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Calculate__Group__2__Impl
	rule__Calculate__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Calculate__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCalculateAccess().getCalculateTypeAssignment_2()); }
	(rule__Calculate__CalculateTypeAssignment_2)
	{ after(grammarAccess.getCalculateAccess().getCalculateTypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Calculate__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Calculate__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Calculate__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCalculateAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getCalculateAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Dataset__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dataset__Group__0__Impl
	rule__Dataset__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Dataset__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDatasetAccess().getDatasetAssignment_0()); }
	(rule__Dataset__DatasetAssignment_0)
	{ after(grammarAccess.getDatasetAccess().getDatasetAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dataset__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dataset__Group__1__Impl
	rule__Dataset__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Dataset__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDatasetAccess().getDataAssignment_1()); }
	(rule__Dataset__DataAssignment_1)
	{ after(grammarAccess.getDatasetAccess().getDataAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dataset__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dataset__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Dataset__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDatasetAccess().getSemicolonKeyword_2()); }
	';'
	{ after(grammarAccess.getDatasetAccess().getSemicolonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Partition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Partition__Group__0__Impl
	rule__Partition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Partition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPartitionAccess().getPartitionKeyword_0()); }
	'partition'
	{ after(grammarAccess.getPartitionAccess().getPartitionKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Partition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Partition__Group__1__Impl
	rule__Partition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Partition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPartitionAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getPartitionAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Partition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Partition__Group__2__Impl
	rule__Partition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Partition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPartitionAccess().getTrainAssignment_2()); }
	(rule__Partition__TrainAssignment_2)
	{ after(grammarAccess.getPartitionAccess().getTrainAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Partition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Partition__Group__3__Impl
	rule__Partition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Partition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPartitionAccess().getCommaKeyword_3()); }
	','
	{ after(grammarAccess.getPartitionAccess().getCommaKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Partition__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Partition__Group__4__Impl
	rule__Partition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Partition__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPartitionAccess().getTestAssignment_4()); }
	(rule__Partition__TestAssignment_4)
	{ after(grammarAccess.getPartitionAccess().getTestAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Partition__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Partition__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Partition__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPartitionAccess().getSemicolonKeyword_5()); }
	';'
	{ after(grammarAccess.getPartitionAccess().getSemicolonKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CrossValidation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CrossValidation__Group__0__Impl
	rule__CrossValidation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CrossValidation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCrossValidationAccess().getCross_validationKeyword_0()); }
	'cross_validation'
	{ after(grammarAccess.getCrossValidationAccess().getCross_validationKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CrossValidation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CrossValidation__Group__1__Impl
	rule__CrossValidation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CrossValidation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCrossValidationAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getCrossValidationAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CrossValidation__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CrossValidation__Group__2__Impl
	rule__CrossValidation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CrossValidation__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCrossValidationAccess().getKAssignment_2()); }
	(rule__CrossValidation__KAssignment_2)
	{ after(grammarAccess.getCrossValidationAccess().getKAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CrossValidation__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CrossValidation__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CrossValidation__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCrossValidationAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getCrossValidationAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Variables__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variables__Group__0__Impl
	rule__Variables__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variables__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariablesAccess().getPredictivesAssignment_0()); }
	(rule__Variables__PredictivesAssignment_0)
	{ after(grammarAccess.getVariablesAccess().getPredictivesAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variables__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variables__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variables__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariablesAccess().getTargetsAssignment_1()); }
	(rule__Variables__TargetsAssignment_1)
	{ after(grammarAccess.getVariablesAccess().getTargetsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ListePredictiveVar__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListePredictiveVar__Group__0__Impl
	rule__ListePredictiveVar__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListePredictiveVar__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListePredictiveVarAccess().getPredictive_varsKeyword_0()); }
	'predictive_vars'
	{ after(grammarAccess.getListePredictiveVarAccess().getPredictive_varsKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListePredictiveVar__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListePredictiveVar__Group__1__Impl
	rule__ListePredictiveVar__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ListePredictiveVar__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListePredictiveVarAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getListePredictiveVarAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListePredictiveVar__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListePredictiveVar__Group__2__Impl
	rule__ListePredictiveVar__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ListePredictiveVar__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListePredictiveVarAccess().getVarsAssignment_2()); }
	(rule__ListePredictiveVar__VarsAssignment_2)
	{ after(grammarAccess.getListePredictiveVarAccess().getVarsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListePredictiveVar__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListePredictiveVar__Group__3__Impl
	rule__ListePredictiveVar__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ListePredictiveVar__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListePredictiveVarAccess().getGroup_3()); }
	(rule__ListePredictiveVar__Group_3__0)*
	{ after(grammarAccess.getListePredictiveVarAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListePredictiveVar__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListePredictiveVar__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListePredictiveVar__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListePredictiveVarAccess().getSemicolonKeyword_4()); }
	';'
	{ after(grammarAccess.getListePredictiveVarAccess().getSemicolonKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ListePredictiveVar__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListePredictiveVar__Group_3__0__Impl
	rule__ListePredictiveVar__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListePredictiveVar__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListePredictiveVarAccess().getCommaKeyword_3_0()); }
	','
	{ after(grammarAccess.getListePredictiveVarAccess().getCommaKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListePredictiveVar__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListePredictiveVar__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListePredictiveVar__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListePredictiveVarAccess().getVarsAssignment_3_1()); }
	(rule__ListePredictiveVar__VarsAssignment_3_1)
	{ after(grammarAccess.getListePredictiveVarAccess().getVarsAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TargetVar__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TargetVar__Group__0__Impl
	rule__TargetVar__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetVar__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTargetVarAccess().getTarget_varKeyword_0()); }
	'target_var'
	{ after(grammarAccess.getTargetVarAccess().getTarget_varKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetVar__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TargetVar__Group__1__Impl
	rule__TargetVar__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetVar__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTargetVarAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getTargetVarAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetVar__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TargetVar__Group__2__Impl
	rule__TargetVar__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetVar__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTargetVarAccess().getVarAssignment_2()); }
	(rule__TargetVar__VarAssignment_2)
	{ after(grammarAccess.getTargetVarAccess().getVarAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetVar__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TargetVar__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetVar__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTargetVarAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getTargetVarAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Algo__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Algo__Group__0__Impl
	rule__Algo__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Algo__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAlgoAccess().getAlgorithmKeyword_0()); }
	'algorithm'
	{ after(grammarAccess.getAlgoAccess().getAlgorithmKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Algo__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Algo__Group__1__Impl
	rule__Algo__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Algo__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAlgoAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getAlgoAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Algo__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Algo__Group__2__Impl
	rule__Algo__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Algo__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAlgoAccess().getAlgoAssignment_2()); }
	(rule__Algo__AlgoAssignment_2)
	{ after(grammarAccess.getAlgoAccess().getAlgoAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Algo__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Algo__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Algo__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAlgoAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getAlgoAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LineRegress__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LineRegress__Group__0__Impl
	rule__LineRegress__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LineRegress__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLineRegressAccess().getLine_regressKeyword_0()); }
	'line_regress'
	{ after(grammarAccess.getLineRegressAccess().getLine_regressKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LineRegress__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LineRegress__Group__1__Impl
	rule__LineRegress__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LineRegress__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLineRegressAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getLineRegressAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LineRegress__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LineRegress__Group__2__Impl
	rule__LineRegress__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LineRegress__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLineRegressAccess().getColumnsAssignment_2()); }
	(rule__LineRegress__ColumnsAssignment_2)
	{ after(grammarAccess.getLineRegressAccess().getColumnsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LineRegress__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LineRegress__Group__3__Impl
	rule__LineRegress__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LineRegress__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLineRegressAccess().getGroup_3()); }
	(rule__LineRegress__Group_3__0)*
	{ after(grammarAccess.getLineRegressAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LineRegress__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LineRegress__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LineRegress__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLineRegressAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getLineRegressAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LineRegress__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LineRegress__Group_3__0__Impl
	rule__LineRegress__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LineRegress__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLineRegressAccess().getCommaKeyword_3_0()); }
	','
	{ after(grammarAccess.getLineRegressAccess().getCommaKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LineRegress__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LineRegress__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LineRegress__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLineRegressAccess().getColumnsAssignment_3_1()); }
	(rule__LineRegress__ColumnsAssignment_3_1)
	{ after(grammarAccess.getLineRegressAccess().getColumnsAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DecisionTreeRegressor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecisionTreeRegressor__Group__0__Impl
	rule__DecisionTreeRegressor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DecisionTreeRegressor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecisionTreeRegressorAccess().getDecision_tree_regressorKeyword_0()); }
	'decision_tree_regressor'
	{ after(grammarAccess.getDecisionTreeRegressorAccess().getDecision_tree_regressorKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecisionTreeRegressor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecisionTreeRegressor__Group__1__Impl
	rule__DecisionTreeRegressor__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DecisionTreeRegressor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecisionTreeRegressorAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getDecisionTreeRegressorAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecisionTreeRegressor__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecisionTreeRegressor__Group__2__Impl
	rule__DecisionTreeRegressor__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DecisionTreeRegressor__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecisionTreeRegressorAccess().getRandAssignment_2()); }
	(rule__DecisionTreeRegressor__RandAssignment_2)
	{ after(grammarAccess.getDecisionTreeRegressorAccess().getRandAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecisionTreeRegressor__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecisionTreeRegressor__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DecisionTreeRegressor__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecisionTreeRegressorAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getDecisionTreeRegressorAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SVR__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SVR__Group__0__Impl
	rule__SVR__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SVR__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSVRAccess().getSvrKeyword_0()); }
	'svr'
	{ after(grammarAccess.getSVRAccess().getSvrKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SVR__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SVR__Group__1__Impl
	rule__SVR__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SVR__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSVRAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getSVRAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SVR__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SVR__Group__2__Impl
	rule__SVR__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SVR__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSVRAccess().getParamAssignment_2()); }
	(rule__SVR__ParamAssignment_2)
	{ after(grammarAccess.getSVRAccess().getParamAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SVR__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SVR__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SVR__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSVRAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getSVRAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NumberValue__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumberValue__Group__0__Impl
	rule__NumberValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberValue__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberValueAccess().getValueAssignment_0()); }
	(rule__NumberValue__ValueAssignment_0)
	{ after(grammarAccess.getNumberValueAccess().getValueAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberValue__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumberValue__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberValue__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberValueAccess().getGroup_1()); }
	(rule__NumberValue__Group_1__0)?
	{ after(grammarAccess.getNumberValueAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NumberValue__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumberValue__Group_1__0__Impl
	rule__NumberValue__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberValue__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberValueAccess().getFullStopKeyword_1_0()); }
	'.'
	{ after(grammarAccess.getNumberValueAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberValue__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumberValue__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberValue__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberValueAccess().getDecimalAssignment_1_1()); }
	(rule__NumberValue__DecimalAssignment_1_1)*
	{ after(grammarAccess.getNumberValueAccess().getDecimalAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PercentValue__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PercentValue__Group__0__Impl
	rule__PercentValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PercentValue__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPercentValueAccess().getNumberValueParserRuleCall_0()); }
	ruleNumberValue
	{ after(grammarAccess.getPercentValueAccess().getNumberValueParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PercentValue__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PercentValue__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PercentValue__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPercentValueAccess().getPercentSignKeyword_1()); }
	'%'
	{ after(grammarAccess.getPercentValueAccess().getPercentSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MLRegression__DatasetAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMLRegressionAccess().getDatasetDatasetParserRuleCall_0_0()); }
		ruleDataset
		{ after(grammarAccess.getMLRegressionAccess().getDatasetDatasetParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MLRegression__EvaluationAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMLRegressionAccess().getEvaluationEvaluationTypeParserRuleCall_1_0()); }
		ruleEvaluationType
		{ after(grammarAccess.getMLRegressionAccess().getEvaluationEvaluationTypeParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MLRegression__VarsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMLRegressionAccess().getVarsVariablesParserRuleCall_2_0()); }
		ruleVariables
		{ after(grammarAccess.getMLRegressionAccess().getVarsVariablesParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MLRegression__CalculateAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMLRegressionAccess().getCalculateCalculateParserRuleCall_3_0()); }
		ruleCalculate
		{ after(grammarAccess.getMLRegressionAccess().getCalculateCalculateParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MLRegression__AlgoAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMLRegressionAccess().getAlgoAlgoParserRuleCall_4_0()); }
		ruleAlgo
		{ after(grammarAccess.getMLRegressionAccess().getAlgoAlgoParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Calculate__CalculateTypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCalculateAccess().getCalculateTypeCalculateTypeParserRuleCall_2_0()); }
		ruleCalculateType
		{ after(grammarAccess.getCalculateAccess().getCalculateTypeCalculateTypeParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dataset__DatasetAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDatasetAccess().getDatasetImportKeyword_0_0()); }
		(
			{ before(grammarAccess.getDatasetAccess().getDatasetImportKeyword_0_0()); }
			'import'
			{ after(grammarAccess.getDatasetAccess().getDatasetImportKeyword_0_0()); }
		)
		{ after(grammarAccess.getDatasetAccess().getDatasetImportKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dataset__DataAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDatasetAccess().getDataStringValueParserRuleCall_1_0()); }
		ruleStringValue
		{ after(grammarAccess.getDatasetAccess().getDataStringValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Partition__TrainAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPartitionAccess().getTrainNumericValueParserRuleCall_2_0()); }
		ruleNumericValue
		{ after(grammarAccess.getPartitionAccess().getTrainNumericValueParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Partition__TestAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPartitionAccess().getTestNumericValueParserRuleCall_4_0()); }
		ruleNumericValue
		{ after(grammarAccess.getPartitionAccess().getTestNumericValueParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CrossValidation__KAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCrossValidationAccess().getKIntegerValueParserRuleCall_2_0()); }
		ruleIntegerValue
		{ after(grammarAccess.getCrossValidationAccess().getKIntegerValueParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variables__PredictivesAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariablesAccess().getPredictivesListePredictiveVarParserRuleCall_0_0()); }
		ruleListePredictiveVar
		{ after(grammarAccess.getVariablesAccess().getPredictivesListePredictiveVarParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variables__TargetsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariablesAccess().getTargetsTargetVarParserRuleCall_1_0()); }
		ruleTargetVar
		{ after(grammarAccess.getVariablesAccess().getTargetsTargetVarParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListePredictiveVar__VarsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListePredictiveVarAccess().getVarsSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getListePredictiveVarAccess().getVarsSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListePredictiveVar__VarsAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListePredictiveVarAccess().getVarsSTRINGTerminalRuleCall_3_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getListePredictiveVarAccess().getVarsSTRINGTerminalRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetVar__VarAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTargetVarAccess().getVarStringValueParserRuleCall_2_0()); }
		ruleStringValue
		{ after(grammarAccess.getTargetVarAccess().getVarStringValueParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Algo__AlgoAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAlgoAccess().getAlgoAlgoMLParserRuleCall_2_0()); }
		ruleAlgoML
		{ after(grammarAccess.getAlgoAccess().getAlgoAlgoMLParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LineRegress__ColumnsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLineRegressAccess().getColumnsSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getLineRegressAccess().getColumnsSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LineRegress__ColumnsAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLineRegressAccess().getColumnsSTRINGTerminalRuleCall_3_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getLineRegressAccess().getColumnsSTRINGTerminalRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecisionTreeRegressor__RandAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDecisionTreeRegressorAccess().getRandINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getDecisionTreeRegressorAccess().getRandINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SVR__ParamAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSVRAccess().getParamIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getSVRAccess().getParamIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringValue__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberValue__ValueAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberValueAccess().getValueINTTerminalRuleCall_0_0()); }
		RULE_INT
		{ after(grammarAccess.getNumberValueAccess().getValueINTTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberValue__DecimalAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberValueAccess().getDecimalINTTerminalRuleCall_1_1_0()); }
		RULE_INT
		{ after(grammarAccess.getNumberValueAccess().getDecimalINTTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerValue__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntegerValueAccess().getValueINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getIntegerValueAccess().getValueINTTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanValue__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanValueAccess().getValueAlternatives_0()); }
		(rule__BooleanValue__ValueAlternatives_0)
		{ after(grammarAccess.getBooleanValueAccess().getValueAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
