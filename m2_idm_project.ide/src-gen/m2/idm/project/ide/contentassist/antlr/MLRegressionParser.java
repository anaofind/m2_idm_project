/*
 * generated by Xtext 2.23.0
 */
package m2.idm.project.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import m2.idm.project.ide.contentassist.antlr.internal.InternalMLRegressionParser;
import m2.idm.project.services.MLRegressionGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class MLRegressionParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MLRegressionGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MLRegressionGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEvaluationTypeAccess().getAlternatives(), "rule__EvaluationType__Alternatives");
			builder.put(grammarAccess.getCalculateTypeAccess().getAlternatives(), "rule__CalculateType__Alternatives");
			builder.put(grammarAccess.getAlgoTypeAccess().getAlternatives(), "rule__AlgoType__Alternatives");
			builder.put(grammarAccess.getNumericValueAccess().getAlternatives(), "rule__NumericValue__Alternatives");
			builder.put(grammarAccess.getBooleanValueAccess().getValueAlternatives_0(), "rule__BooleanValue__ValueAlternatives_0");
			builder.put(grammarAccess.getMLRegressionAccess().getGroup(), "rule__MLRegression__Group__0");
			builder.put(grammarAccess.getDatasetAccess().getGroup(), "rule__Dataset__Group__0");
			builder.put(grammarAccess.getPartitionAccess().getGroup(), "rule__Partition__Group__0");
			builder.put(grammarAccess.getCrossValidationAccess().getGroup(), "rule__CrossValidation__Group__0");
			builder.put(grammarAccess.getVariablesAccess().getGroup(), "rule__Variables__Group__0");
			builder.put(grammarAccess.getListePredictiveVarAccess().getGroup(), "rule__ListePredictiveVar__Group__0");
			builder.put(grammarAccess.getListePredictiveVarAccess().getGroup_3(), "rule__ListePredictiveVar__Group_3__0");
			builder.put(grammarAccess.getTargetVarAccess().getGroup(), "rule__TargetVar__Group__0");
			builder.put(grammarAccess.getTargetVarAccess().getGroup_3(), "rule__TargetVar__Group_3__0");
			builder.put(grammarAccess.getCalculateAccess().getGroup(), "rule__Calculate__Group__0");
			builder.put(grammarAccess.getAlgoAccess().getGroup(), "rule__Algo__Group__0");
			builder.put(grammarAccess.getLineRegressAccess().getGroup(), "rule__LineRegress__Group__0");
			builder.put(grammarAccess.getDecisionTreeRegressorAccess().getGroup(), "rule__DecisionTreeRegressor__Group__0");
			builder.put(grammarAccess.getSVRAccess().getGroup(), "rule__SVR__Group__0");
			builder.put(grammarAccess.getFLOATAccess().getGroup(), "rule__FLOAT__Group__0");
			builder.put(grammarAccess.getFLOATAccess().getGroup_1(), "rule__FLOAT__Group_1__0");
			builder.put(grammarAccess.getPERCENTAccess().getGroup(), "rule__PERCENT__Group__0");
			builder.put(grammarAccess.getMLRegressionAccess().getDatasetAssignment_0(), "rule__MLRegression__DatasetAssignment_0");
			builder.put(grammarAccess.getMLRegressionAccess().getVarsAssignment_1(), "rule__MLRegression__VarsAssignment_1");
			builder.put(grammarAccess.getMLRegressionAccess().getEvaluationAssignment_2(), "rule__MLRegression__EvaluationAssignment_2");
			builder.put(grammarAccess.getMLRegressionAccess().getAlgoAssignment_3(), "rule__MLRegression__AlgoAssignment_3");
			builder.put(grammarAccess.getMLRegressionAccess().getCalculateAssignment_4(), "rule__MLRegression__CalculateAssignment_4");
			builder.put(grammarAccess.getDatasetAccess().getDataPathAssignment_1(), "rule__Dataset__DataPathAssignment_1");
			builder.put(grammarAccess.getDatasetAccess().getSeparatorAssignment_2(), "rule__Dataset__SeparatorAssignment_2");
			builder.put(grammarAccess.getPartitionAccess().getTestAssignment_2(), "rule__Partition__TestAssignment_2");
			builder.put(grammarAccess.getCrossValidationAccess().getKAssignment_2(), "rule__CrossValidation__KAssignment_2");
			builder.put(grammarAccess.getVariablesAccess().getPredictivesAssignment_0(), "rule__Variables__PredictivesAssignment_0");
			builder.put(grammarAccess.getVariablesAccess().getTargetsAssignment_1(), "rule__Variables__TargetsAssignment_1");
			builder.put(grammarAccess.getListePredictiveVarAccess().getPredVarAssignment_2(), "rule__ListePredictiveVar__PredVarAssignment_2");
			builder.put(grammarAccess.getListePredictiveVarAccess().getPredVarAssignment_3_1(), "rule__ListePredictiveVar__PredVarAssignment_3_1");
			builder.put(grammarAccess.getTargetVarAccess().getTargetVarAssignment_2(), "rule__TargetVar__TargetVarAssignment_2");
			builder.put(grammarAccess.getTargetVarAccess().getTargetVarAssignment_3_1(), "rule__TargetVar__TargetVarAssignment_3_1");
			builder.put(grammarAccess.getCalculateAccess().getCalculateTypeAssignment_2(), "rule__Calculate__CalculateTypeAssignment_2");
			builder.put(grammarAccess.getAlgoAccess().getAlgoAssignment_2(), "rule__Algo__AlgoAssignment_2");
			builder.put(grammarAccess.getAlgoAccess().getLeftSidePredictAssignment_4(), "rule__Algo__LeftSidePredictAssignment_4");
			builder.put(grammarAccess.getLineRegressAccess().getRandAssignment_2(), "rule__LineRegress__RandAssignment_2");
			builder.put(grammarAccess.getDecisionTreeRegressorAccess().getRandAssignment_2(), "rule__DecisionTreeRegressor__RandAssignment_2");
			builder.put(grammarAccess.getSVRAccess().getParamAssignment_2(), "rule__SVR__ParamAssignment_2");
			builder.put(grammarAccess.getFLOATAccess().getValueAssignment_0(), "rule__FLOAT__ValueAssignment_0");
			builder.put(grammarAccess.getFLOATAccess().getDecimalAssignment_1_1(), "rule__FLOAT__DecimalAssignment_1_1");
			builder.put(grammarAccess.getPERCENTAccess().getFloatAssignment_0(), "rule__PERCENT__FloatAssignment_0");
			builder.put(grammarAccess.getBooleanValueAccess().getValueAssignment(), "rule__BooleanValue__ValueAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MLRegressionGrammarAccess grammarAccess;

	@Override
	protected InternalMLRegressionParser createParser() {
		InternalMLRegressionParser result = new InternalMLRegressionParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MLRegressionGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MLRegressionGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
