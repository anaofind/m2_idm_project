/*
 * generated by Xtext 2.23.0
 */
package m2.idm.project.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import m2.idm.project.ide.contentassist.antlr.internal.InternalMLRegressionParser;
import m2.idm.project.services.MLRegressionGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class MLRegressionParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MLRegressionGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MLRegressionGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getLearningTypeAccess().getAlternatives_1(), "rule__LearningType__Alternatives_1");
			builder.put(grammarAccess.getTrainingAccess().getTrainingAlternatives_1_0(), "rule__Training__TrainingAlternatives_1_0");
			builder.put(grammarAccess.getTypeValueAccess().getAlternatives(), "rule__TypeValue__Alternatives");
			builder.put(grammarAccess.getBooleanValueAccess().getValueAlternatives_0(), "rule__BooleanValue__ValueAlternatives_0");
			builder.put(grammarAccess.getMLRegressionAccess().getGroup(), "rule__MLRegression__Group__0");
			builder.put(grammarAccess.getDatasetAccess().getGroup(), "rule__Dataset__Group__0");
			builder.put(grammarAccess.getLearningTypeAccess().getGroup(), "rule__LearningType__Group__0");
			builder.put(grammarAccess.getTrainingAccess().getGroup(), "rule__Training__Group__0");
			builder.put(grammarAccess.getVariablesAccess().getGroup(), "rule__Variables__Group__0");
			builder.put(grammarAccess.getPredictivesAccess().getGroup(), "rule__Predictives__Group__0");
			builder.put(grammarAccess.getTargetsAccess().getGroup(), "rule__Targets__Group__0");
			builder.put(grammarAccess.getReturnTypeAccess().getGroup(), "rule__ReturnType__Group__0");
			builder.put(grammarAccess.getNumberValueAccess().getGroup(), "rule__NumberValue__Group__0");
			builder.put(grammarAccess.getNumberValueAccess().getGroup_1(), "rule__NumberValue__Group_1__0");
			builder.put(grammarAccess.getPercentValueAccess().getGroup(), "rule__PercentValue__Group__0");
			builder.put(grammarAccess.getMLRegressionAccess().getDatasetAssignment_0(), "rule__MLRegression__DatasetAssignment_0");
			builder.put(grammarAccess.getMLRegressionAccess().getLearningTypeAssignment_1(), "rule__MLRegression__LearningTypeAssignment_1");
			builder.put(grammarAccess.getMLRegressionAccess().getVarsAssignment_2(), "rule__MLRegression__VarsAssignment_2");
			builder.put(grammarAccess.getMLRegressionAccess().getReturnTypeAssignment_3(), "rule__MLRegression__ReturnTypeAssignment_3");
			builder.put(grammarAccess.getDatasetAccess().getDatasetAssignment_0(), "rule__Dataset__DatasetAssignment_0");
			builder.put(grammarAccess.getDatasetAccess().getDataAssignment_1(), "rule__Dataset__DataAssignment_1");
			builder.put(grammarAccess.getLearningTypeAccess().getTrainingAssignment_1_0(), "rule__LearningType__TrainingAssignment_1_0");
			builder.put(grammarAccess.getLearningTypeAccess().getCrossValidationAssignment_1_1(), "rule__LearningType__CrossValidationAssignment_1_1");
			builder.put(grammarAccess.getTrainingAccess().getTrainingAssignment_1(), "rule__Training__TrainingAssignment_1");
			builder.put(grammarAccess.getVariablesAccess().getPredictivesAssignment_0(), "rule__Variables__PredictivesAssignment_0");
			builder.put(grammarAccess.getVariablesAccess().getTargetsAssignment_1(), "rule__Variables__TargetsAssignment_1");
			builder.put(grammarAccess.getPredictivesAccess().getVarsAssignment_2(), "rule__Predictives__VarsAssignment_2");
			builder.put(grammarAccess.getTargetsAccess().getVarAssignment_1(), "rule__Targets__VarAssignment_1");
			builder.put(grammarAccess.getVarAccess().getNameVarAssignment(), "rule__Var__NameVarAssignment");
			builder.put(grammarAccess.getReturnTypeAccess().getNameReturnAssignment_1(), "rule__ReturnType__NameReturnAssignment_1");
			builder.put(grammarAccess.getStringValueAccess().getValueAssignment(), "rule__StringValue__ValueAssignment");
			builder.put(grammarAccess.getNumberValueAccess().getValueAssignment_0(), "rule__NumberValue__ValueAssignment_0");
			builder.put(grammarAccess.getNumberValueAccess().getDecimalAssignment_1_1(), "rule__NumberValue__DecimalAssignment_1_1");
			builder.put(grammarAccess.getBooleanValueAccess().getValueAssignment(), "rule__BooleanValue__ValueAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MLRegressionGrammarAccess grammarAccess;

	@Override
	protected InternalMLRegressionParser createParser() {
		InternalMLRegressionParser result = new InternalMLRegressionParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MLRegressionGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MLRegressionGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
